
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Employer
 * 
 */
export type Employer = $Result.DefaultSelection<Prisma.$EmployerPayload>
/**
 * Model Applicant
 * 
 */
export type Applicant = $Result.DefaultSelection<Prisma.$ApplicantPayload>
/**
 * Model Doc
 * 
 */
export type Doc = $Result.DefaultSelection<Prisma.$DocPayload>
/**
 * Model JobCategory
 * 
 */
export type JobCategory = $Result.DefaultSelection<Prisma.$JobCategoryPayload>
/**
 * Model JobPosting
 * 
 */
export type JobPosting = $Result.DefaultSelection<Prisma.$JobPostingPayload>
/**
 * Model DiscardedJob
 * 
 */
export type DiscardedJob = $Result.DefaultSelection<Prisma.$DiscardedJobPayload>
/**
 * Model LikedJob
 * 
 */
export type LikedJob = $Result.DefaultSelection<Prisma.$LikedJobPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.employer`: Exposes CRUD operations for the **Employer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Employers
    * const employers = await prisma.employer.findMany()
    * ```
    */
  get employer(): Prisma.EmployerDelegate<ExtArgs>;

  /**
   * `prisma.applicant`: Exposes CRUD operations for the **Applicant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Applicants
    * const applicants = await prisma.applicant.findMany()
    * ```
    */
  get applicant(): Prisma.ApplicantDelegate<ExtArgs>;

  /**
   * `prisma.doc`: Exposes CRUD operations for the **Doc** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Docs
    * const docs = await prisma.doc.findMany()
    * ```
    */
  get doc(): Prisma.DocDelegate<ExtArgs>;

  /**
   * `prisma.jobCategory`: Exposes CRUD operations for the **JobCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JobCategories
    * const jobCategories = await prisma.jobCategory.findMany()
    * ```
    */
  get jobCategory(): Prisma.JobCategoryDelegate<ExtArgs>;

  /**
   * `prisma.jobPosting`: Exposes CRUD operations for the **JobPosting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JobPostings
    * const jobPostings = await prisma.jobPosting.findMany()
    * ```
    */
  get jobPosting(): Prisma.JobPostingDelegate<ExtArgs>;

  /**
   * `prisma.discardedJob`: Exposes CRUD operations for the **DiscardedJob** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DiscardedJobs
    * const discardedJobs = await prisma.discardedJob.findMany()
    * ```
    */
  get discardedJob(): Prisma.DiscardedJobDelegate<ExtArgs>;

  /**
   * `prisma.likedJob`: Exposes CRUD operations for the **LikedJob** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LikedJobs
    * const likedJobs = await prisma.likedJob.findMany()
    * ```
    */
  get likedJob(): Prisma.LikedJobDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 4123509d24aa4dede1e864b46351bf2790323b69
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Employer: 'Employer',
    Applicant: 'Applicant',
    Doc: 'Doc',
    JobCategory: 'JobCategory',
    JobPosting: 'JobPosting',
    DiscardedJob: 'DiscardedJob',
    LikedJob: 'LikedJob'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "employer" | "applicant" | "doc" | "jobCategory" | "jobPosting" | "discardedJob" | "likedJob"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Employer: {
        payload: Prisma.$EmployerPayload<ExtArgs>
        fields: Prisma.EmployerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmployerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmployerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployerPayload>
          }
          findFirst: {
            args: Prisma.EmployerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmployerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployerPayload>
          }
          findMany: {
            args: Prisma.EmployerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployerPayload>[]
          }
          create: {
            args: Prisma.EmployerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployerPayload>
          }
          createMany: {
            args: Prisma.EmployerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmployerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployerPayload>[]
          }
          delete: {
            args: Prisma.EmployerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployerPayload>
          }
          update: {
            args: Prisma.EmployerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployerPayload>
          }
          deleteMany: {
            args: Prisma.EmployerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmployerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EmployerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployerPayload>
          }
          aggregate: {
            args: Prisma.EmployerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmployer>
          }
          groupBy: {
            args: Prisma.EmployerGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmployerGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmployerCountArgs<ExtArgs>
            result: $Utils.Optional<EmployerCountAggregateOutputType> | number
          }
        }
      }
      Applicant: {
        payload: Prisma.$ApplicantPayload<ExtArgs>
        fields: Prisma.ApplicantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ApplicantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ApplicantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicantPayload>
          }
          findFirst: {
            args: Prisma.ApplicantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ApplicantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicantPayload>
          }
          findMany: {
            args: Prisma.ApplicantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicantPayload>[]
          }
          create: {
            args: Prisma.ApplicantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicantPayload>
          }
          createMany: {
            args: Prisma.ApplicantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ApplicantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicantPayload>[]
          }
          delete: {
            args: Prisma.ApplicantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicantPayload>
          }
          update: {
            args: Prisma.ApplicantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicantPayload>
          }
          deleteMany: {
            args: Prisma.ApplicantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ApplicantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ApplicantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicantPayload>
          }
          aggregate: {
            args: Prisma.ApplicantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateApplicant>
          }
          groupBy: {
            args: Prisma.ApplicantGroupByArgs<ExtArgs>
            result: $Utils.Optional<ApplicantGroupByOutputType>[]
          }
          count: {
            args: Prisma.ApplicantCountArgs<ExtArgs>
            result: $Utils.Optional<ApplicantCountAggregateOutputType> | number
          }
        }
      }
      Doc: {
        payload: Prisma.$DocPayload<ExtArgs>
        fields: Prisma.DocFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocPayload>
          }
          findFirst: {
            args: Prisma.DocFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocPayload>
          }
          findMany: {
            args: Prisma.DocFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocPayload>[]
          }
          create: {
            args: Prisma.DocCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocPayload>
          }
          createMany: {
            args: Prisma.DocCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocPayload>[]
          }
          delete: {
            args: Prisma.DocDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocPayload>
          }
          update: {
            args: Prisma.DocUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocPayload>
          }
          deleteMany: {
            args: Prisma.DocDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DocUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocPayload>
          }
          aggregate: {
            args: Prisma.DocAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDoc>
          }
          groupBy: {
            args: Prisma.DocGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocCountArgs<ExtArgs>
            result: $Utils.Optional<DocCountAggregateOutputType> | number
          }
        }
      }
      JobCategory: {
        payload: Prisma.$JobCategoryPayload<ExtArgs>
        fields: Prisma.JobCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobCategoryPayload>
          }
          findFirst: {
            args: Prisma.JobCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobCategoryPayload>
          }
          findMany: {
            args: Prisma.JobCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobCategoryPayload>[]
          }
          create: {
            args: Prisma.JobCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobCategoryPayload>
          }
          createMany: {
            args: Prisma.JobCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JobCategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobCategoryPayload>[]
          }
          delete: {
            args: Prisma.JobCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobCategoryPayload>
          }
          update: {
            args: Prisma.JobCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobCategoryPayload>
          }
          deleteMany: {
            args: Prisma.JobCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JobCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.JobCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobCategoryPayload>
          }
          aggregate: {
            args: Prisma.JobCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJobCategory>
          }
          groupBy: {
            args: Prisma.JobCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<JobCategoryCountAggregateOutputType> | number
          }
        }
      }
      JobPosting: {
        payload: Prisma.$JobPostingPayload<ExtArgs>
        fields: Prisma.JobPostingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobPostingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPostingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobPostingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPostingPayload>
          }
          findFirst: {
            args: Prisma.JobPostingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPostingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobPostingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPostingPayload>
          }
          findMany: {
            args: Prisma.JobPostingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPostingPayload>[]
          }
          create: {
            args: Prisma.JobPostingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPostingPayload>
          }
          createMany: {
            args: Prisma.JobPostingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JobPostingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPostingPayload>[]
          }
          delete: {
            args: Prisma.JobPostingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPostingPayload>
          }
          update: {
            args: Prisma.JobPostingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPostingPayload>
          }
          deleteMany: {
            args: Prisma.JobPostingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JobPostingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.JobPostingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPostingPayload>
          }
          aggregate: {
            args: Prisma.JobPostingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJobPosting>
          }
          groupBy: {
            args: Prisma.JobPostingGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobPostingGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobPostingCountArgs<ExtArgs>
            result: $Utils.Optional<JobPostingCountAggregateOutputType> | number
          }
        }
      }
      DiscardedJob: {
        payload: Prisma.$DiscardedJobPayload<ExtArgs>
        fields: Prisma.DiscardedJobFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DiscardedJobFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscardedJobPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DiscardedJobFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscardedJobPayload>
          }
          findFirst: {
            args: Prisma.DiscardedJobFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscardedJobPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DiscardedJobFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscardedJobPayload>
          }
          findMany: {
            args: Prisma.DiscardedJobFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscardedJobPayload>[]
          }
          create: {
            args: Prisma.DiscardedJobCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscardedJobPayload>
          }
          createMany: {
            args: Prisma.DiscardedJobCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DiscardedJobCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscardedJobPayload>[]
          }
          delete: {
            args: Prisma.DiscardedJobDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscardedJobPayload>
          }
          update: {
            args: Prisma.DiscardedJobUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscardedJobPayload>
          }
          deleteMany: {
            args: Prisma.DiscardedJobDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DiscardedJobUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DiscardedJobUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscardedJobPayload>
          }
          aggregate: {
            args: Prisma.DiscardedJobAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDiscardedJob>
          }
          groupBy: {
            args: Prisma.DiscardedJobGroupByArgs<ExtArgs>
            result: $Utils.Optional<DiscardedJobGroupByOutputType>[]
          }
          count: {
            args: Prisma.DiscardedJobCountArgs<ExtArgs>
            result: $Utils.Optional<DiscardedJobCountAggregateOutputType> | number
          }
        }
      }
      LikedJob: {
        payload: Prisma.$LikedJobPayload<ExtArgs>
        fields: Prisma.LikedJobFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LikedJobFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikedJobPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LikedJobFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikedJobPayload>
          }
          findFirst: {
            args: Prisma.LikedJobFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikedJobPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LikedJobFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikedJobPayload>
          }
          findMany: {
            args: Prisma.LikedJobFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikedJobPayload>[]
          }
          create: {
            args: Prisma.LikedJobCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikedJobPayload>
          }
          createMany: {
            args: Prisma.LikedJobCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LikedJobCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikedJobPayload>[]
          }
          delete: {
            args: Prisma.LikedJobDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikedJobPayload>
          }
          update: {
            args: Prisma.LikedJobUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikedJobPayload>
          }
          deleteMany: {
            args: Prisma.LikedJobDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LikedJobUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LikedJobUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikedJobPayload>
          }
          aggregate: {
            args: Prisma.LikedJobAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLikedJob>
          }
          groupBy: {
            args: Prisma.LikedJobGroupByArgs<ExtArgs>
            result: $Utils.Optional<LikedJobGroupByOutputType>[]
          }
          count: {
            args: Prisma.LikedJobCountArgs<ExtArgs>
            result: $Utils.Optional<LikedJobCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type EmployerCountOutputType
   */

  export type EmployerCountOutputType = {
    jobPostings: number
  }

  export type EmployerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobPostings?: boolean | EmployerCountOutputTypeCountJobPostingsArgs
  }

  // Custom InputTypes
  /**
   * EmployerCountOutputType without action
   */
  export type EmployerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployerCountOutputType
     */
    select?: EmployerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EmployerCountOutputType without action
   */
  export type EmployerCountOutputTypeCountJobPostingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobPostingWhereInput
  }


  /**
   * Count Type ApplicantCountOutputType
   */

  export type ApplicantCountOutputType = {
    docs: number
    discardedJobs: number
    likedJobs: number
  }

  export type ApplicantCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    docs?: boolean | ApplicantCountOutputTypeCountDocsArgs
    discardedJobs?: boolean | ApplicantCountOutputTypeCountDiscardedJobsArgs
    likedJobs?: boolean | ApplicantCountOutputTypeCountLikedJobsArgs
  }

  // Custom InputTypes
  /**
   * ApplicantCountOutputType without action
   */
  export type ApplicantCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicantCountOutputType
     */
    select?: ApplicantCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ApplicantCountOutputType without action
   */
  export type ApplicantCountOutputTypeCountDocsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocWhereInput
  }

  /**
   * ApplicantCountOutputType without action
   */
  export type ApplicantCountOutputTypeCountDiscardedJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiscardedJobWhereInput
  }

  /**
   * ApplicantCountOutputType without action
   */
  export type ApplicantCountOutputTypeCountLikedJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikedJobWhereInput
  }


  /**
   * Count Type JobCategoryCountOutputType
   */

  export type JobCategoryCountOutputType = {
    jobPostings: number
  }

  export type JobCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobPostings?: boolean | JobCategoryCountOutputTypeCountJobPostingsArgs
  }

  // Custom InputTypes
  /**
   * JobCategoryCountOutputType without action
   */
  export type JobCategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobCategoryCountOutputType
     */
    select?: JobCategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * JobCategoryCountOutputType without action
   */
  export type JobCategoryCountOutputTypeCountJobPostingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobPostingWhereInput
  }


  /**
   * Count Type JobPostingCountOutputType
   */

  export type JobPostingCountOutputType = {
    discardedJobs: number
    likedJobs: number
  }

  export type JobPostingCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    discardedJobs?: boolean | JobPostingCountOutputTypeCountDiscardedJobsArgs
    likedJobs?: boolean | JobPostingCountOutputTypeCountLikedJobsArgs
  }

  // Custom InputTypes
  /**
   * JobPostingCountOutputType without action
   */
  export type JobPostingCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPostingCountOutputType
     */
    select?: JobPostingCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * JobPostingCountOutputType without action
   */
  export type JobPostingCountOutputTypeCountDiscardedJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiscardedJobWhereInput
  }

  /**
   * JobPostingCountOutputType without action
   */
  export type JobPostingCountOutputTypeCountLikedJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikedJobWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
    applicantId: string | null
    employerId: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
    applicantId: string | null
    employerId: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    createdAt: number
    updatedAt: number
    applicantId: number
    employerId: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    applicantId?: true
    employerId?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    applicantId?: true
    employerId?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    applicantId?: true
    employerId?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    createdAt: Date
    updatedAt: Date
    applicantId: string | null
    employerId: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    applicantId?: boolean
    employerId?: boolean
    applicant?: boolean | User$applicantArgs<ExtArgs>
    employer?: boolean | User$employerArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    applicantId?: boolean
    employerId?: boolean
    applicant?: boolean | User$applicantArgs<ExtArgs>
    employer?: boolean | User$employerArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    applicantId?: boolean
    employerId?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applicant?: boolean | User$applicantArgs<ExtArgs>
    employer?: boolean | User$employerArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applicant?: boolean | User$applicantArgs<ExtArgs>
    employer?: boolean | User$employerArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      applicant: Prisma.$ApplicantPayload<ExtArgs> | null
      employer: Prisma.$EmployerPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      createdAt: Date
      updatedAt: Date
      applicantId: string | null
      employerId: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    applicant<T extends User$applicantArgs<ExtArgs> = {}>(args?: Subset<T, User$applicantArgs<ExtArgs>>): Prisma__ApplicantClient<$Result.GetResult<Prisma.$ApplicantPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    employer<T extends User$employerArgs<ExtArgs> = {}>(args?: Subset<T, User$employerArgs<ExtArgs>>): Prisma__EmployerClient<$Result.GetResult<Prisma.$EmployerPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly applicantId: FieldRef<"User", 'String'>
    readonly employerId: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.applicant
   */
  export type User$applicantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Applicant
     */
    select?: ApplicantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantInclude<ExtArgs> | null
    where?: ApplicantWhereInput
  }

  /**
   * User.employer
   */
  export type User$employerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employer
     */
    select?: EmployerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployerInclude<ExtArgs> | null
    where?: EmployerWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Employer
   */

  export type AggregateEmployer = {
    _count: EmployerCountAggregateOutputType | null
    _min: EmployerMinAggregateOutputType | null
    _max: EmployerMaxAggregateOutputType | null
  }

  export type EmployerMinAggregateOutputType = {
    id: string | null
    name: string | null
    address: string | null
    websiteUrl: string | null
    category: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmployerMaxAggregateOutputType = {
    id: string | null
    name: string | null
    address: string | null
    websiteUrl: string | null
    category: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmployerCountAggregateOutputType = {
    id: number
    name: number
    address: number
    websiteUrl: number
    category: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EmployerMinAggregateInputType = {
    id?: true
    name?: true
    address?: true
    websiteUrl?: true
    category?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmployerMaxAggregateInputType = {
    id?: true
    name?: true
    address?: true
    websiteUrl?: true
    category?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmployerCountAggregateInputType = {
    id?: true
    name?: true
    address?: true
    websiteUrl?: true
    category?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EmployerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employer to aggregate.
     */
    where?: EmployerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employers to fetch.
     */
    orderBy?: EmployerOrderByWithRelationInput | EmployerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmployerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Employers
    **/
    _count?: true | EmployerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmployerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmployerMaxAggregateInputType
  }

  export type GetEmployerAggregateType<T extends EmployerAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployer[P]>
      : GetScalarType<T[P], AggregateEmployer[P]>
  }




  export type EmployerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployerWhereInput
    orderBy?: EmployerOrderByWithAggregationInput | EmployerOrderByWithAggregationInput[]
    by: EmployerScalarFieldEnum[] | EmployerScalarFieldEnum
    having?: EmployerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmployerCountAggregateInputType | true
    _min?: EmployerMinAggregateInputType
    _max?: EmployerMaxAggregateInputType
  }

  export type EmployerGroupByOutputType = {
    id: string
    name: string
    address: string
    websiteUrl: string | null
    category: string
    createdAt: Date
    updatedAt: Date
    _count: EmployerCountAggregateOutputType | null
    _min: EmployerMinAggregateOutputType | null
    _max: EmployerMaxAggregateOutputType | null
  }

  type GetEmployerGroupByPayload<T extends EmployerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmployerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmployerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmployerGroupByOutputType[P]>
            : GetScalarType<T[P], EmployerGroupByOutputType[P]>
        }
      >
    >


  export type EmployerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    websiteUrl?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | Employer$userArgs<ExtArgs>
    jobPostings?: boolean | Employer$jobPostingsArgs<ExtArgs>
    _count?: boolean | EmployerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employer"]>

  export type EmployerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    websiteUrl?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["employer"]>

  export type EmployerSelectScalar = {
    id?: boolean
    name?: boolean
    address?: boolean
    websiteUrl?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EmployerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Employer$userArgs<ExtArgs>
    jobPostings?: boolean | Employer$jobPostingsArgs<ExtArgs>
    _count?: boolean | EmployerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EmployerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $EmployerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Employer"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      jobPostings: Prisma.$JobPostingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      address: string
      websiteUrl: string | null
      category: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["employer"]>
    composites: {}
  }

  type EmployerGetPayload<S extends boolean | null | undefined | EmployerDefaultArgs> = $Result.GetResult<Prisma.$EmployerPayload, S>

  type EmployerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EmployerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EmployerCountAggregateInputType | true
    }

  export interface EmployerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Employer'], meta: { name: 'Employer' } }
    /**
     * Find zero or one Employer that matches the filter.
     * @param {EmployerFindUniqueArgs} args - Arguments to find a Employer
     * @example
     * // Get one Employer
     * const employer = await prisma.employer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmployerFindUniqueArgs>(args: SelectSubset<T, EmployerFindUniqueArgs<ExtArgs>>): Prisma__EmployerClient<$Result.GetResult<Prisma.$EmployerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Employer that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EmployerFindUniqueOrThrowArgs} args - Arguments to find a Employer
     * @example
     * // Get one Employer
     * const employer = await prisma.employer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmployerFindUniqueOrThrowArgs>(args: SelectSubset<T, EmployerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmployerClient<$Result.GetResult<Prisma.$EmployerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Employer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployerFindFirstArgs} args - Arguments to find a Employer
     * @example
     * // Get one Employer
     * const employer = await prisma.employer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmployerFindFirstArgs>(args?: SelectSubset<T, EmployerFindFirstArgs<ExtArgs>>): Prisma__EmployerClient<$Result.GetResult<Prisma.$EmployerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Employer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployerFindFirstOrThrowArgs} args - Arguments to find a Employer
     * @example
     * // Get one Employer
     * const employer = await prisma.employer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmployerFindFirstOrThrowArgs>(args?: SelectSubset<T, EmployerFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmployerClient<$Result.GetResult<Prisma.$EmployerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Employers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Employers
     * const employers = await prisma.employer.findMany()
     * 
     * // Get first 10 Employers
     * const employers = await prisma.employer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const employerWithIdOnly = await prisma.employer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmployerFindManyArgs>(args?: SelectSubset<T, EmployerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Employer.
     * @param {EmployerCreateArgs} args - Arguments to create a Employer.
     * @example
     * // Create one Employer
     * const Employer = await prisma.employer.create({
     *   data: {
     *     // ... data to create a Employer
     *   }
     * })
     * 
     */
    create<T extends EmployerCreateArgs>(args: SelectSubset<T, EmployerCreateArgs<ExtArgs>>): Prisma__EmployerClient<$Result.GetResult<Prisma.$EmployerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Employers.
     * @param {EmployerCreateManyArgs} args - Arguments to create many Employers.
     * @example
     * // Create many Employers
     * const employer = await prisma.employer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmployerCreateManyArgs>(args?: SelectSubset<T, EmployerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Employers and returns the data saved in the database.
     * @param {EmployerCreateManyAndReturnArgs} args - Arguments to create many Employers.
     * @example
     * // Create many Employers
     * const employer = await prisma.employer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Employers and only return the `id`
     * const employerWithIdOnly = await prisma.employer.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmployerCreateManyAndReturnArgs>(args?: SelectSubset<T, EmployerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployerPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Employer.
     * @param {EmployerDeleteArgs} args - Arguments to delete one Employer.
     * @example
     * // Delete one Employer
     * const Employer = await prisma.employer.delete({
     *   where: {
     *     // ... filter to delete one Employer
     *   }
     * })
     * 
     */
    delete<T extends EmployerDeleteArgs>(args: SelectSubset<T, EmployerDeleteArgs<ExtArgs>>): Prisma__EmployerClient<$Result.GetResult<Prisma.$EmployerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Employer.
     * @param {EmployerUpdateArgs} args - Arguments to update one Employer.
     * @example
     * // Update one Employer
     * const employer = await prisma.employer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmployerUpdateArgs>(args: SelectSubset<T, EmployerUpdateArgs<ExtArgs>>): Prisma__EmployerClient<$Result.GetResult<Prisma.$EmployerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Employers.
     * @param {EmployerDeleteManyArgs} args - Arguments to filter Employers to delete.
     * @example
     * // Delete a few Employers
     * const { count } = await prisma.employer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmployerDeleteManyArgs>(args?: SelectSubset<T, EmployerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Employers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Employers
     * const employer = await prisma.employer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmployerUpdateManyArgs>(args: SelectSubset<T, EmployerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Employer.
     * @param {EmployerUpsertArgs} args - Arguments to update or create a Employer.
     * @example
     * // Update or create a Employer
     * const employer = await prisma.employer.upsert({
     *   create: {
     *     // ... data to create a Employer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Employer we want to update
     *   }
     * })
     */
    upsert<T extends EmployerUpsertArgs>(args: SelectSubset<T, EmployerUpsertArgs<ExtArgs>>): Prisma__EmployerClient<$Result.GetResult<Prisma.$EmployerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Employers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployerCountArgs} args - Arguments to filter Employers to count.
     * @example
     * // Count the number of Employers
     * const count = await prisma.employer.count({
     *   where: {
     *     // ... the filter for the Employers we want to count
     *   }
     * })
    **/
    count<T extends EmployerCountArgs>(
      args?: Subset<T, EmployerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Employer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployerAggregateArgs>(args: Subset<T, EmployerAggregateArgs>): Prisma.PrismaPromise<GetEmployerAggregateType<T>>

    /**
     * Group by Employer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmployerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmployerGroupByArgs['orderBy'] }
        : { orderBy?: EmployerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmployerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Employer model
   */
  readonly fields: EmployerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Employer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmployerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Employer$userArgs<ExtArgs> = {}>(args?: Subset<T, Employer$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    jobPostings<T extends Employer$jobPostingsArgs<ExtArgs> = {}>(args?: Subset<T, Employer$jobPostingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPostingPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Employer model
   */ 
  interface EmployerFieldRefs {
    readonly id: FieldRef<"Employer", 'String'>
    readonly name: FieldRef<"Employer", 'String'>
    readonly address: FieldRef<"Employer", 'String'>
    readonly websiteUrl: FieldRef<"Employer", 'String'>
    readonly category: FieldRef<"Employer", 'String'>
    readonly createdAt: FieldRef<"Employer", 'DateTime'>
    readonly updatedAt: FieldRef<"Employer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Employer findUnique
   */
  export type EmployerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employer
     */
    select?: EmployerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployerInclude<ExtArgs> | null
    /**
     * Filter, which Employer to fetch.
     */
    where: EmployerWhereUniqueInput
  }

  /**
   * Employer findUniqueOrThrow
   */
  export type EmployerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employer
     */
    select?: EmployerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployerInclude<ExtArgs> | null
    /**
     * Filter, which Employer to fetch.
     */
    where: EmployerWhereUniqueInput
  }

  /**
   * Employer findFirst
   */
  export type EmployerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employer
     */
    select?: EmployerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployerInclude<ExtArgs> | null
    /**
     * Filter, which Employer to fetch.
     */
    where?: EmployerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employers to fetch.
     */
    orderBy?: EmployerOrderByWithRelationInput | EmployerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employers.
     */
    cursor?: EmployerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employers.
     */
    distinct?: EmployerScalarFieldEnum | EmployerScalarFieldEnum[]
  }

  /**
   * Employer findFirstOrThrow
   */
  export type EmployerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employer
     */
    select?: EmployerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployerInclude<ExtArgs> | null
    /**
     * Filter, which Employer to fetch.
     */
    where?: EmployerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employers to fetch.
     */
    orderBy?: EmployerOrderByWithRelationInput | EmployerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employers.
     */
    cursor?: EmployerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employers.
     */
    distinct?: EmployerScalarFieldEnum | EmployerScalarFieldEnum[]
  }

  /**
   * Employer findMany
   */
  export type EmployerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employer
     */
    select?: EmployerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployerInclude<ExtArgs> | null
    /**
     * Filter, which Employers to fetch.
     */
    where?: EmployerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employers to fetch.
     */
    orderBy?: EmployerOrderByWithRelationInput | EmployerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Employers.
     */
    cursor?: EmployerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employers.
     */
    skip?: number
    distinct?: EmployerScalarFieldEnum | EmployerScalarFieldEnum[]
  }

  /**
   * Employer create
   */
  export type EmployerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employer
     */
    select?: EmployerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployerInclude<ExtArgs> | null
    /**
     * The data needed to create a Employer.
     */
    data: XOR<EmployerCreateInput, EmployerUncheckedCreateInput>
  }

  /**
   * Employer createMany
   */
  export type EmployerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Employers.
     */
    data: EmployerCreateManyInput | EmployerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Employer createManyAndReturn
   */
  export type EmployerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employer
     */
    select?: EmployerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Employers.
     */
    data: EmployerCreateManyInput | EmployerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Employer update
   */
  export type EmployerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employer
     */
    select?: EmployerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployerInclude<ExtArgs> | null
    /**
     * The data needed to update a Employer.
     */
    data: XOR<EmployerUpdateInput, EmployerUncheckedUpdateInput>
    /**
     * Choose, which Employer to update.
     */
    where: EmployerWhereUniqueInput
  }

  /**
   * Employer updateMany
   */
  export type EmployerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Employers.
     */
    data: XOR<EmployerUpdateManyMutationInput, EmployerUncheckedUpdateManyInput>
    /**
     * Filter which Employers to update
     */
    where?: EmployerWhereInput
  }

  /**
   * Employer upsert
   */
  export type EmployerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employer
     */
    select?: EmployerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployerInclude<ExtArgs> | null
    /**
     * The filter to search for the Employer to update in case it exists.
     */
    where: EmployerWhereUniqueInput
    /**
     * In case the Employer found by the `where` argument doesn't exist, create a new Employer with this data.
     */
    create: XOR<EmployerCreateInput, EmployerUncheckedCreateInput>
    /**
     * In case the Employer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmployerUpdateInput, EmployerUncheckedUpdateInput>
  }

  /**
   * Employer delete
   */
  export type EmployerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employer
     */
    select?: EmployerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployerInclude<ExtArgs> | null
    /**
     * Filter which Employer to delete.
     */
    where: EmployerWhereUniqueInput
  }

  /**
   * Employer deleteMany
   */
  export type EmployerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employers to delete
     */
    where?: EmployerWhereInput
  }

  /**
   * Employer.user
   */
  export type Employer$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Employer.jobPostings
   */
  export type Employer$jobPostingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPosting
     */
    select?: JobPostingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPostingInclude<ExtArgs> | null
    where?: JobPostingWhereInput
    orderBy?: JobPostingOrderByWithRelationInput | JobPostingOrderByWithRelationInput[]
    cursor?: JobPostingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobPostingScalarFieldEnum | JobPostingScalarFieldEnum[]
  }

  /**
   * Employer without action
   */
  export type EmployerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employer
     */
    select?: EmployerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployerInclude<ExtArgs> | null
  }


  /**
   * Model Applicant
   */

  export type AggregateApplicant = {
    _count: ApplicantCountAggregateOutputType | null
    _min: ApplicantMinAggregateOutputType | null
    _max: ApplicantMaxAggregateOutputType | null
  }

  export type ApplicantMinAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    phoneNumber: string | null
    introduction: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ApplicantMaxAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    phoneNumber: string | null
    introduction: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ApplicantCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    phoneNumber: number
    introduction: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ApplicantMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    phoneNumber?: true
    introduction?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ApplicantMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    phoneNumber?: true
    introduction?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ApplicantCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    phoneNumber?: true
    introduction?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ApplicantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Applicant to aggregate.
     */
    where?: ApplicantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applicants to fetch.
     */
    orderBy?: ApplicantOrderByWithRelationInput | ApplicantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApplicantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applicants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applicants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Applicants
    **/
    _count?: true | ApplicantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApplicantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApplicantMaxAggregateInputType
  }

  export type GetApplicantAggregateType<T extends ApplicantAggregateArgs> = {
        [P in keyof T & keyof AggregateApplicant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApplicant[P]>
      : GetScalarType<T[P], AggregateApplicant[P]>
  }




  export type ApplicantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicantWhereInput
    orderBy?: ApplicantOrderByWithAggregationInput | ApplicantOrderByWithAggregationInput[]
    by: ApplicantScalarFieldEnum[] | ApplicantScalarFieldEnum
    having?: ApplicantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApplicantCountAggregateInputType | true
    _min?: ApplicantMinAggregateInputType
    _max?: ApplicantMaxAggregateInputType
  }

  export type ApplicantGroupByOutputType = {
    id: string
    firstName: string
    lastName: string
    phoneNumber: string | null
    introduction: string | null
    createdAt: Date
    updatedAt: Date
    _count: ApplicantCountAggregateOutputType | null
    _min: ApplicantMinAggregateOutputType | null
    _max: ApplicantMaxAggregateOutputType | null
  }

  type GetApplicantGroupByPayload<T extends ApplicantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApplicantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApplicantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApplicantGroupByOutputType[P]>
            : GetScalarType<T[P], ApplicantGroupByOutputType[P]>
        }
      >
    >


  export type ApplicantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    phoneNumber?: boolean
    introduction?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | Applicant$userArgs<ExtArgs>
    docs?: boolean | Applicant$docsArgs<ExtArgs>
    discardedJobs?: boolean | Applicant$discardedJobsArgs<ExtArgs>
    likedJobs?: boolean | Applicant$likedJobsArgs<ExtArgs>
    _count?: boolean | ApplicantCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["applicant"]>

  export type ApplicantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    phoneNumber?: boolean
    introduction?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["applicant"]>

  export type ApplicantSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    phoneNumber?: boolean
    introduction?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ApplicantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Applicant$userArgs<ExtArgs>
    docs?: boolean | Applicant$docsArgs<ExtArgs>
    discardedJobs?: boolean | Applicant$discardedJobsArgs<ExtArgs>
    likedJobs?: boolean | Applicant$likedJobsArgs<ExtArgs>
    _count?: boolean | ApplicantCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ApplicantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ApplicantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Applicant"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      docs: Prisma.$DocPayload<ExtArgs>[]
      discardedJobs: Prisma.$DiscardedJobPayload<ExtArgs>[]
      likedJobs: Prisma.$LikedJobPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      firstName: string
      lastName: string
      phoneNumber: string | null
      introduction: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["applicant"]>
    composites: {}
  }

  type ApplicantGetPayload<S extends boolean | null | undefined | ApplicantDefaultArgs> = $Result.GetResult<Prisma.$ApplicantPayload, S>

  type ApplicantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ApplicantFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ApplicantCountAggregateInputType | true
    }

  export interface ApplicantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Applicant'], meta: { name: 'Applicant' } }
    /**
     * Find zero or one Applicant that matches the filter.
     * @param {ApplicantFindUniqueArgs} args - Arguments to find a Applicant
     * @example
     * // Get one Applicant
     * const applicant = await prisma.applicant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ApplicantFindUniqueArgs>(args: SelectSubset<T, ApplicantFindUniqueArgs<ExtArgs>>): Prisma__ApplicantClient<$Result.GetResult<Prisma.$ApplicantPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Applicant that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ApplicantFindUniqueOrThrowArgs} args - Arguments to find a Applicant
     * @example
     * // Get one Applicant
     * const applicant = await prisma.applicant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ApplicantFindUniqueOrThrowArgs>(args: SelectSubset<T, ApplicantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ApplicantClient<$Result.GetResult<Prisma.$ApplicantPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Applicant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicantFindFirstArgs} args - Arguments to find a Applicant
     * @example
     * // Get one Applicant
     * const applicant = await prisma.applicant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ApplicantFindFirstArgs>(args?: SelectSubset<T, ApplicantFindFirstArgs<ExtArgs>>): Prisma__ApplicantClient<$Result.GetResult<Prisma.$ApplicantPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Applicant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicantFindFirstOrThrowArgs} args - Arguments to find a Applicant
     * @example
     * // Get one Applicant
     * const applicant = await prisma.applicant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ApplicantFindFirstOrThrowArgs>(args?: SelectSubset<T, ApplicantFindFirstOrThrowArgs<ExtArgs>>): Prisma__ApplicantClient<$Result.GetResult<Prisma.$ApplicantPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Applicants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Applicants
     * const applicants = await prisma.applicant.findMany()
     * 
     * // Get first 10 Applicants
     * const applicants = await prisma.applicant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const applicantWithIdOnly = await prisma.applicant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ApplicantFindManyArgs>(args?: SelectSubset<T, ApplicantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicantPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Applicant.
     * @param {ApplicantCreateArgs} args - Arguments to create a Applicant.
     * @example
     * // Create one Applicant
     * const Applicant = await prisma.applicant.create({
     *   data: {
     *     // ... data to create a Applicant
     *   }
     * })
     * 
     */
    create<T extends ApplicantCreateArgs>(args: SelectSubset<T, ApplicantCreateArgs<ExtArgs>>): Prisma__ApplicantClient<$Result.GetResult<Prisma.$ApplicantPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Applicants.
     * @param {ApplicantCreateManyArgs} args - Arguments to create many Applicants.
     * @example
     * // Create many Applicants
     * const applicant = await prisma.applicant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ApplicantCreateManyArgs>(args?: SelectSubset<T, ApplicantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Applicants and returns the data saved in the database.
     * @param {ApplicantCreateManyAndReturnArgs} args - Arguments to create many Applicants.
     * @example
     * // Create many Applicants
     * const applicant = await prisma.applicant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Applicants and only return the `id`
     * const applicantWithIdOnly = await prisma.applicant.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ApplicantCreateManyAndReturnArgs>(args?: SelectSubset<T, ApplicantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicantPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Applicant.
     * @param {ApplicantDeleteArgs} args - Arguments to delete one Applicant.
     * @example
     * // Delete one Applicant
     * const Applicant = await prisma.applicant.delete({
     *   where: {
     *     // ... filter to delete one Applicant
     *   }
     * })
     * 
     */
    delete<T extends ApplicantDeleteArgs>(args: SelectSubset<T, ApplicantDeleteArgs<ExtArgs>>): Prisma__ApplicantClient<$Result.GetResult<Prisma.$ApplicantPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Applicant.
     * @param {ApplicantUpdateArgs} args - Arguments to update one Applicant.
     * @example
     * // Update one Applicant
     * const applicant = await prisma.applicant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ApplicantUpdateArgs>(args: SelectSubset<T, ApplicantUpdateArgs<ExtArgs>>): Prisma__ApplicantClient<$Result.GetResult<Prisma.$ApplicantPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Applicants.
     * @param {ApplicantDeleteManyArgs} args - Arguments to filter Applicants to delete.
     * @example
     * // Delete a few Applicants
     * const { count } = await prisma.applicant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ApplicantDeleteManyArgs>(args?: SelectSubset<T, ApplicantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Applicants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Applicants
     * const applicant = await prisma.applicant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ApplicantUpdateManyArgs>(args: SelectSubset<T, ApplicantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Applicant.
     * @param {ApplicantUpsertArgs} args - Arguments to update or create a Applicant.
     * @example
     * // Update or create a Applicant
     * const applicant = await prisma.applicant.upsert({
     *   create: {
     *     // ... data to create a Applicant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Applicant we want to update
     *   }
     * })
     */
    upsert<T extends ApplicantUpsertArgs>(args: SelectSubset<T, ApplicantUpsertArgs<ExtArgs>>): Prisma__ApplicantClient<$Result.GetResult<Prisma.$ApplicantPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Applicants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicantCountArgs} args - Arguments to filter Applicants to count.
     * @example
     * // Count the number of Applicants
     * const count = await prisma.applicant.count({
     *   where: {
     *     // ... the filter for the Applicants we want to count
     *   }
     * })
    **/
    count<T extends ApplicantCountArgs>(
      args?: Subset<T, ApplicantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApplicantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Applicant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApplicantAggregateArgs>(args: Subset<T, ApplicantAggregateArgs>): Prisma.PrismaPromise<GetApplicantAggregateType<T>>

    /**
     * Group by Applicant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApplicantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApplicantGroupByArgs['orderBy'] }
        : { orderBy?: ApplicantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApplicantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApplicantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Applicant model
   */
  readonly fields: ApplicantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Applicant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ApplicantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Applicant$userArgs<ExtArgs> = {}>(args?: Subset<T, Applicant$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    docs<T extends Applicant$docsArgs<ExtArgs> = {}>(args?: Subset<T, Applicant$docsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocPayload<ExtArgs>, T, "findMany"> | Null>
    discardedJobs<T extends Applicant$discardedJobsArgs<ExtArgs> = {}>(args?: Subset<T, Applicant$discardedJobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscardedJobPayload<ExtArgs>, T, "findMany"> | Null>
    likedJobs<T extends Applicant$likedJobsArgs<ExtArgs> = {}>(args?: Subset<T, Applicant$likedJobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikedJobPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Applicant model
   */ 
  interface ApplicantFieldRefs {
    readonly id: FieldRef<"Applicant", 'String'>
    readonly firstName: FieldRef<"Applicant", 'String'>
    readonly lastName: FieldRef<"Applicant", 'String'>
    readonly phoneNumber: FieldRef<"Applicant", 'String'>
    readonly introduction: FieldRef<"Applicant", 'String'>
    readonly createdAt: FieldRef<"Applicant", 'DateTime'>
    readonly updatedAt: FieldRef<"Applicant", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Applicant findUnique
   */
  export type ApplicantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Applicant
     */
    select?: ApplicantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantInclude<ExtArgs> | null
    /**
     * Filter, which Applicant to fetch.
     */
    where: ApplicantWhereUniqueInput
  }

  /**
   * Applicant findUniqueOrThrow
   */
  export type ApplicantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Applicant
     */
    select?: ApplicantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantInclude<ExtArgs> | null
    /**
     * Filter, which Applicant to fetch.
     */
    where: ApplicantWhereUniqueInput
  }

  /**
   * Applicant findFirst
   */
  export type ApplicantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Applicant
     */
    select?: ApplicantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantInclude<ExtArgs> | null
    /**
     * Filter, which Applicant to fetch.
     */
    where?: ApplicantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applicants to fetch.
     */
    orderBy?: ApplicantOrderByWithRelationInput | ApplicantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Applicants.
     */
    cursor?: ApplicantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applicants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applicants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Applicants.
     */
    distinct?: ApplicantScalarFieldEnum | ApplicantScalarFieldEnum[]
  }

  /**
   * Applicant findFirstOrThrow
   */
  export type ApplicantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Applicant
     */
    select?: ApplicantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantInclude<ExtArgs> | null
    /**
     * Filter, which Applicant to fetch.
     */
    where?: ApplicantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applicants to fetch.
     */
    orderBy?: ApplicantOrderByWithRelationInput | ApplicantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Applicants.
     */
    cursor?: ApplicantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applicants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applicants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Applicants.
     */
    distinct?: ApplicantScalarFieldEnum | ApplicantScalarFieldEnum[]
  }

  /**
   * Applicant findMany
   */
  export type ApplicantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Applicant
     */
    select?: ApplicantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantInclude<ExtArgs> | null
    /**
     * Filter, which Applicants to fetch.
     */
    where?: ApplicantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applicants to fetch.
     */
    orderBy?: ApplicantOrderByWithRelationInput | ApplicantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Applicants.
     */
    cursor?: ApplicantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applicants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applicants.
     */
    skip?: number
    distinct?: ApplicantScalarFieldEnum | ApplicantScalarFieldEnum[]
  }

  /**
   * Applicant create
   */
  export type ApplicantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Applicant
     */
    select?: ApplicantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantInclude<ExtArgs> | null
    /**
     * The data needed to create a Applicant.
     */
    data: XOR<ApplicantCreateInput, ApplicantUncheckedCreateInput>
  }

  /**
   * Applicant createMany
   */
  export type ApplicantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Applicants.
     */
    data: ApplicantCreateManyInput | ApplicantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Applicant createManyAndReturn
   */
  export type ApplicantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Applicant
     */
    select?: ApplicantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Applicants.
     */
    data: ApplicantCreateManyInput | ApplicantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Applicant update
   */
  export type ApplicantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Applicant
     */
    select?: ApplicantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantInclude<ExtArgs> | null
    /**
     * The data needed to update a Applicant.
     */
    data: XOR<ApplicantUpdateInput, ApplicantUncheckedUpdateInput>
    /**
     * Choose, which Applicant to update.
     */
    where: ApplicantWhereUniqueInput
  }

  /**
   * Applicant updateMany
   */
  export type ApplicantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Applicants.
     */
    data: XOR<ApplicantUpdateManyMutationInput, ApplicantUncheckedUpdateManyInput>
    /**
     * Filter which Applicants to update
     */
    where?: ApplicantWhereInput
  }

  /**
   * Applicant upsert
   */
  export type ApplicantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Applicant
     */
    select?: ApplicantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantInclude<ExtArgs> | null
    /**
     * The filter to search for the Applicant to update in case it exists.
     */
    where: ApplicantWhereUniqueInput
    /**
     * In case the Applicant found by the `where` argument doesn't exist, create a new Applicant with this data.
     */
    create: XOR<ApplicantCreateInput, ApplicantUncheckedCreateInput>
    /**
     * In case the Applicant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApplicantUpdateInput, ApplicantUncheckedUpdateInput>
  }

  /**
   * Applicant delete
   */
  export type ApplicantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Applicant
     */
    select?: ApplicantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantInclude<ExtArgs> | null
    /**
     * Filter which Applicant to delete.
     */
    where: ApplicantWhereUniqueInput
  }

  /**
   * Applicant deleteMany
   */
  export type ApplicantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Applicants to delete
     */
    where?: ApplicantWhereInput
  }

  /**
   * Applicant.user
   */
  export type Applicant$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Applicant.docs
   */
  export type Applicant$docsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doc
     */
    select?: DocSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocInclude<ExtArgs> | null
    where?: DocWhereInput
    orderBy?: DocOrderByWithRelationInput | DocOrderByWithRelationInput[]
    cursor?: DocWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocScalarFieldEnum | DocScalarFieldEnum[]
  }

  /**
   * Applicant.discardedJobs
   */
  export type Applicant$discardedJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscardedJob
     */
    select?: DiscardedJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscardedJobInclude<ExtArgs> | null
    where?: DiscardedJobWhereInput
    orderBy?: DiscardedJobOrderByWithRelationInput | DiscardedJobOrderByWithRelationInput[]
    cursor?: DiscardedJobWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DiscardedJobScalarFieldEnum | DiscardedJobScalarFieldEnum[]
  }

  /**
   * Applicant.likedJobs
   */
  export type Applicant$likedJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikedJob
     */
    select?: LikedJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikedJobInclude<ExtArgs> | null
    where?: LikedJobWhereInput
    orderBy?: LikedJobOrderByWithRelationInput | LikedJobOrderByWithRelationInput[]
    cursor?: LikedJobWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LikedJobScalarFieldEnum | LikedJobScalarFieldEnum[]
  }

  /**
   * Applicant without action
   */
  export type ApplicantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Applicant
     */
    select?: ApplicantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantInclude<ExtArgs> | null
  }


  /**
   * Model Doc
   */

  export type AggregateDoc = {
    _count: DocCountAggregateOutputType | null
    _min: DocMinAggregateOutputType | null
    _max: DocMaxAggregateOutputType | null
  }

  export type DocMinAggregateOutputType = {
    id: string | null
    filename: string | null
    fileUrl: string | null
    fileType: string | null
    createdAt: Date | null
    updatedAt: Date | null
    applicantId: string | null
  }

  export type DocMaxAggregateOutputType = {
    id: string | null
    filename: string | null
    fileUrl: string | null
    fileType: string | null
    createdAt: Date | null
    updatedAt: Date | null
    applicantId: string | null
  }

  export type DocCountAggregateOutputType = {
    id: number
    filename: number
    fileUrl: number
    fileType: number
    createdAt: number
    updatedAt: number
    applicantId: number
    _all: number
  }


  export type DocMinAggregateInputType = {
    id?: true
    filename?: true
    fileUrl?: true
    fileType?: true
    createdAt?: true
    updatedAt?: true
    applicantId?: true
  }

  export type DocMaxAggregateInputType = {
    id?: true
    filename?: true
    fileUrl?: true
    fileType?: true
    createdAt?: true
    updatedAt?: true
    applicantId?: true
  }

  export type DocCountAggregateInputType = {
    id?: true
    filename?: true
    fileUrl?: true
    fileType?: true
    createdAt?: true
    updatedAt?: true
    applicantId?: true
    _all?: true
  }

  export type DocAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Doc to aggregate.
     */
    where?: DocWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Docs to fetch.
     */
    orderBy?: DocOrderByWithRelationInput | DocOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Docs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Docs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Docs
    **/
    _count?: true | DocCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocMaxAggregateInputType
  }

  export type GetDocAggregateType<T extends DocAggregateArgs> = {
        [P in keyof T & keyof AggregateDoc]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoc[P]>
      : GetScalarType<T[P], AggregateDoc[P]>
  }




  export type DocGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocWhereInput
    orderBy?: DocOrderByWithAggregationInput | DocOrderByWithAggregationInput[]
    by: DocScalarFieldEnum[] | DocScalarFieldEnum
    having?: DocScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocCountAggregateInputType | true
    _min?: DocMinAggregateInputType
    _max?: DocMaxAggregateInputType
  }

  export type DocGroupByOutputType = {
    id: string
    filename: string
    fileUrl: string
    fileType: string
    createdAt: Date
    updatedAt: Date
    applicantId: string
    _count: DocCountAggregateOutputType | null
    _min: DocMinAggregateOutputType | null
    _max: DocMaxAggregateOutputType | null
  }

  type GetDocGroupByPayload<T extends DocGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocGroupByOutputType[P]>
            : GetScalarType<T[P], DocGroupByOutputType[P]>
        }
      >
    >


  export type DocSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    filename?: boolean
    fileUrl?: boolean
    fileType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    applicantId?: boolean
    applicant?: boolean | ApplicantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doc"]>

  export type DocSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    filename?: boolean
    fileUrl?: boolean
    fileType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    applicantId?: boolean
    applicant?: boolean | ApplicantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doc"]>

  export type DocSelectScalar = {
    id?: boolean
    filename?: boolean
    fileUrl?: boolean
    fileType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    applicantId?: boolean
  }

  export type DocInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applicant?: boolean | ApplicantDefaultArgs<ExtArgs>
  }
  export type DocIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applicant?: boolean | ApplicantDefaultArgs<ExtArgs>
  }

  export type $DocPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Doc"
    objects: {
      applicant: Prisma.$ApplicantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      filename: string
      fileUrl: string
      fileType: string
      createdAt: Date
      updatedAt: Date
      applicantId: string
    }, ExtArgs["result"]["doc"]>
    composites: {}
  }

  type DocGetPayload<S extends boolean | null | undefined | DocDefaultArgs> = $Result.GetResult<Prisma.$DocPayload, S>

  type DocCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DocFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DocCountAggregateInputType | true
    }

  export interface DocDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Doc'], meta: { name: 'Doc' } }
    /**
     * Find zero or one Doc that matches the filter.
     * @param {DocFindUniqueArgs} args - Arguments to find a Doc
     * @example
     * // Get one Doc
     * const doc = await prisma.doc.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocFindUniqueArgs>(args: SelectSubset<T, DocFindUniqueArgs<ExtArgs>>): Prisma__DocClient<$Result.GetResult<Prisma.$DocPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Doc that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DocFindUniqueOrThrowArgs} args - Arguments to find a Doc
     * @example
     * // Get one Doc
     * const doc = await prisma.doc.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocFindUniqueOrThrowArgs>(args: SelectSubset<T, DocFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocClient<$Result.GetResult<Prisma.$DocPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Doc that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocFindFirstArgs} args - Arguments to find a Doc
     * @example
     * // Get one Doc
     * const doc = await prisma.doc.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocFindFirstArgs>(args?: SelectSubset<T, DocFindFirstArgs<ExtArgs>>): Prisma__DocClient<$Result.GetResult<Prisma.$DocPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Doc that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocFindFirstOrThrowArgs} args - Arguments to find a Doc
     * @example
     * // Get one Doc
     * const doc = await prisma.doc.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocFindFirstOrThrowArgs>(args?: SelectSubset<T, DocFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocClient<$Result.GetResult<Prisma.$DocPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Docs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Docs
     * const docs = await prisma.doc.findMany()
     * 
     * // Get first 10 Docs
     * const docs = await prisma.doc.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const docWithIdOnly = await prisma.doc.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocFindManyArgs>(args?: SelectSubset<T, DocFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Doc.
     * @param {DocCreateArgs} args - Arguments to create a Doc.
     * @example
     * // Create one Doc
     * const Doc = await prisma.doc.create({
     *   data: {
     *     // ... data to create a Doc
     *   }
     * })
     * 
     */
    create<T extends DocCreateArgs>(args: SelectSubset<T, DocCreateArgs<ExtArgs>>): Prisma__DocClient<$Result.GetResult<Prisma.$DocPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Docs.
     * @param {DocCreateManyArgs} args - Arguments to create many Docs.
     * @example
     * // Create many Docs
     * const doc = await prisma.doc.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocCreateManyArgs>(args?: SelectSubset<T, DocCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Docs and returns the data saved in the database.
     * @param {DocCreateManyAndReturnArgs} args - Arguments to create many Docs.
     * @example
     * // Create many Docs
     * const doc = await prisma.doc.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Docs and only return the `id`
     * const docWithIdOnly = await prisma.doc.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocCreateManyAndReturnArgs>(args?: SelectSubset<T, DocCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Doc.
     * @param {DocDeleteArgs} args - Arguments to delete one Doc.
     * @example
     * // Delete one Doc
     * const Doc = await prisma.doc.delete({
     *   where: {
     *     // ... filter to delete one Doc
     *   }
     * })
     * 
     */
    delete<T extends DocDeleteArgs>(args: SelectSubset<T, DocDeleteArgs<ExtArgs>>): Prisma__DocClient<$Result.GetResult<Prisma.$DocPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Doc.
     * @param {DocUpdateArgs} args - Arguments to update one Doc.
     * @example
     * // Update one Doc
     * const doc = await prisma.doc.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocUpdateArgs>(args: SelectSubset<T, DocUpdateArgs<ExtArgs>>): Prisma__DocClient<$Result.GetResult<Prisma.$DocPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Docs.
     * @param {DocDeleteManyArgs} args - Arguments to filter Docs to delete.
     * @example
     * // Delete a few Docs
     * const { count } = await prisma.doc.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocDeleteManyArgs>(args?: SelectSubset<T, DocDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Docs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Docs
     * const doc = await prisma.doc.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocUpdateManyArgs>(args: SelectSubset<T, DocUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Doc.
     * @param {DocUpsertArgs} args - Arguments to update or create a Doc.
     * @example
     * // Update or create a Doc
     * const doc = await prisma.doc.upsert({
     *   create: {
     *     // ... data to create a Doc
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Doc we want to update
     *   }
     * })
     */
    upsert<T extends DocUpsertArgs>(args: SelectSubset<T, DocUpsertArgs<ExtArgs>>): Prisma__DocClient<$Result.GetResult<Prisma.$DocPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Docs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocCountArgs} args - Arguments to filter Docs to count.
     * @example
     * // Count the number of Docs
     * const count = await prisma.doc.count({
     *   where: {
     *     // ... the filter for the Docs we want to count
     *   }
     * })
    **/
    count<T extends DocCountArgs>(
      args?: Subset<T, DocCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Doc.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocAggregateArgs>(args: Subset<T, DocAggregateArgs>): Prisma.PrismaPromise<GetDocAggregateType<T>>

    /**
     * Group by Doc.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocGroupByArgs['orderBy'] }
        : { orderBy?: DocGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Doc model
   */
  readonly fields: DocFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Doc.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    applicant<T extends ApplicantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ApplicantDefaultArgs<ExtArgs>>): Prisma__ApplicantClient<$Result.GetResult<Prisma.$ApplicantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Doc model
   */ 
  interface DocFieldRefs {
    readonly id: FieldRef<"Doc", 'String'>
    readonly filename: FieldRef<"Doc", 'String'>
    readonly fileUrl: FieldRef<"Doc", 'String'>
    readonly fileType: FieldRef<"Doc", 'String'>
    readonly createdAt: FieldRef<"Doc", 'DateTime'>
    readonly updatedAt: FieldRef<"Doc", 'DateTime'>
    readonly applicantId: FieldRef<"Doc", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Doc findUnique
   */
  export type DocFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doc
     */
    select?: DocSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocInclude<ExtArgs> | null
    /**
     * Filter, which Doc to fetch.
     */
    where: DocWhereUniqueInput
  }

  /**
   * Doc findUniqueOrThrow
   */
  export type DocFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doc
     */
    select?: DocSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocInclude<ExtArgs> | null
    /**
     * Filter, which Doc to fetch.
     */
    where: DocWhereUniqueInput
  }

  /**
   * Doc findFirst
   */
  export type DocFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doc
     */
    select?: DocSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocInclude<ExtArgs> | null
    /**
     * Filter, which Doc to fetch.
     */
    where?: DocWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Docs to fetch.
     */
    orderBy?: DocOrderByWithRelationInput | DocOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Docs.
     */
    cursor?: DocWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Docs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Docs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Docs.
     */
    distinct?: DocScalarFieldEnum | DocScalarFieldEnum[]
  }

  /**
   * Doc findFirstOrThrow
   */
  export type DocFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doc
     */
    select?: DocSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocInclude<ExtArgs> | null
    /**
     * Filter, which Doc to fetch.
     */
    where?: DocWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Docs to fetch.
     */
    orderBy?: DocOrderByWithRelationInput | DocOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Docs.
     */
    cursor?: DocWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Docs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Docs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Docs.
     */
    distinct?: DocScalarFieldEnum | DocScalarFieldEnum[]
  }

  /**
   * Doc findMany
   */
  export type DocFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doc
     */
    select?: DocSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocInclude<ExtArgs> | null
    /**
     * Filter, which Docs to fetch.
     */
    where?: DocWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Docs to fetch.
     */
    orderBy?: DocOrderByWithRelationInput | DocOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Docs.
     */
    cursor?: DocWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Docs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Docs.
     */
    skip?: number
    distinct?: DocScalarFieldEnum | DocScalarFieldEnum[]
  }

  /**
   * Doc create
   */
  export type DocCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doc
     */
    select?: DocSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocInclude<ExtArgs> | null
    /**
     * The data needed to create a Doc.
     */
    data: XOR<DocCreateInput, DocUncheckedCreateInput>
  }

  /**
   * Doc createMany
   */
  export type DocCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Docs.
     */
    data: DocCreateManyInput | DocCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Doc createManyAndReturn
   */
  export type DocCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doc
     */
    select?: DocSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Docs.
     */
    data: DocCreateManyInput | DocCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Doc update
   */
  export type DocUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doc
     */
    select?: DocSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocInclude<ExtArgs> | null
    /**
     * The data needed to update a Doc.
     */
    data: XOR<DocUpdateInput, DocUncheckedUpdateInput>
    /**
     * Choose, which Doc to update.
     */
    where: DocWhereUniqueInput
  }

  /**
   * Doc updateMany
   */
  export type DocUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Docs.
     */
    data: XOR<DocUpdateManyMutationInput, DocUncheckedUpdateManyInput>
    /**
     * Filter which Docs to update
     */
    where?: DocWhereInput
  }

  /**
   * Doc upsert
   */
  export type DocUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doc
     */
    select?: DocSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocInclude<ExtArgs> | null
    /**
     * The filter to search for the Doc to update in case it exists.
     */
    where: DocWhereUniqueInput
    /**
     * In case the Doc found by the `where` argument doesn't exist, create a new Doc with this data.
     */
    create: XOR<DocCreateInput, DocUncheckedCreateInput>
    /**
     * In case the Doc was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocUpdateInput, DocUncheckedUpdateInput>
  }

  /**
   * Doc delete
   */
  export type DocDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doc
     */
    select?: DocSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocInclude<ExtArgs> | null
    /**
     * Filter which Doc to delete.
     */
    where: DocWhereUniqueInput
  }

  /**
   * Doc deleteMany
   */
  export type DocDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Docs to delete
     */
    where?: DocWhereInput
  }

  /**
   * Doc without action
   */
  export type DocDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doc
     */
    select?: DocSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocInclude<ExtArgs> | null
  }


  /**
   * Model JobCategory
   */

  export type AggregateJobCategory = {
    _count: JobCategoryCountAggregateOutputType | null
    _min: JobCategoryMinAggregateOutputType | null
    _max: JobCategoryMaxAggregateOutputType | null
  }

  export type JobCategoryMinAggregateOutputType = {
    id: string | null
    category: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JobCategoryMaxAggregateOutputType = {
    id: string | null
    category: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JobCategoryCountAggregateOutputType = {
    id: number
    category: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type JobCategoryMinAggregateInputType = {
    id?: true
    category?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JobCategoryMaxAggregateInputType = {
    id?: true
    category?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JobCategoryCountAggregateInputType = {
    id?: true
    category?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type JobCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobCategory to aggregate.
     */
    where?: JobCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobCategories to fetch.
     */
    orderBy?: JobCategoryOrderByWithRelationInput | JobCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JobCategories
    **/
    _count?: true | JobCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobCategoryMaxAggregateInputType
  }

  export type GetJobCategoryAggregateType<T extends JobCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateJobCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJobCategory[P]>
      : GetScalarType<T[P], AggregateJobCategory[P]>
  }




  export type JobCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobCategoryWhereInput
    orderBy?: JobCategoryOrderByWithAggregationInput | JobCategoryOrderByWithAggregationInput[]
    by: JobCategoryScalarFieldEnum[] | JobCategoryScalarFieldEnum
    having?: JobCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobCategoryCountAggregateInputType | true
    _min?: JobCategoryMinAggregateInputType
    _max?: JobCategoryMaxAggregateInputType
  }

  export type JobCategoryGroupByOutputType = {
    id: string
    category: string
    name: string
    createdAt: Date
    updatedAt: Date
    _count: JobCategoryCountAggregateOutputType | null
    _min: JobCategoryMinAggregateOutputType | null
    _max: JobCategoryMaxAggregateOutputType | null
  }

  type GetJobCategoryGroupByPayload<T extends JobCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], JobCategoryGroupByOutputType[P]>
        }
      >
    >


  export type JobCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    category?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    jobPostings?: boolean | JobCategory$jobPostingsArgs<ExtArgs>
    _count?: boolean | JobCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobCategory"]>

  export type JobCategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    category?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["jobCategory"]>

  export type JobCategorySelectScalar = {
    id?: boolean
    category?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type JobCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobPostings?: boolean | JobCategory$jobPostingsArgs<ExtArgs>
    _count?: boolean | JobCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type JobCategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $JobCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JobCategory"
    objects: {
      jobPostings: Prisma.$JobPostingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      category: string
      name: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["jobCategory"]>
    composites: {}
  }

  type JobCategoryGetPayload<S extends boolean | null | undefined | JobCategoryDefaultArgs> = $Result.GetResult<Prisma.$JobCategoryPayload, S>

  type JobCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<JobCategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: JobCategoryCountAggregateInputType | true
    }

  export interface JobCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JobCategory'], meta: { name: 'JobCategory' } }
    /**
     * Find zero or one JobCategory that matches the filter.
     * @param {JobCategoryFindUniqueArgs} args - Arguments to find a JobCategory
     * @example
     * // Get one JobCategory
     * const jobCategory = await prisma.jobCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JobCategoryFindUniqueArgs>(args: SelectSubset<T, JobCategoryFindUniqueArgs<ExtArgs>>): Prisma__JobCategoryClient<$Result.GetResult<Prisma.$JobCategoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one JobCategory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {JobCategoryFindUniqueOrThrowArgs} args - Arguments to find a JobCategory
     * @example
     * // Get one JobCategory
     * const jobCategory = await prisma.jobCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JobCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, JobCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JobCategoryClient<$Result.GetResult<Prisma.$JobCategoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first JobCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobCategoryFindFirstArgs} args - Arguments to find a JobCategory
     * @example
     * // Get one JobCategory
     * const jobCategory = await prisma.jobCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JobCategoryFindFirstArgs>(args?: SelectSubset<T, JobCategoryFindFirstArgs<ExtArgs>>): Prisma__JobCategoryClient<$Result.GetResult<Prisma.$JobCategoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first JobCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobCategoryFindFirstOrThrowArgs} args - Arguments to find a JobCategory
     * @example
     * // Get one JobCategory
     * const jobCategory = await prisma.jobCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JobCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, JobCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__JobCategoryClient<$Result.GetResult<Prisma.$JobCategoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more JobCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JobCategories
     * const jobCategories = await prisma.jobCategory.findMany()
     * 
     * // Get first 10 JobCategories
     * const jobCategories = await prisma.jobCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobCategoryWithIdOnly = await prisma.jobCategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JobCategoryFindManyArgs>(args?: SelectSubset<T, JobCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobCategoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a JobCategory.
     * @param {JobCategoryCreateArgs} args - Arguments to create a JobCategory.
     * @example
     * // Create one JobCategory
     * const JobCategory = await prisma.jobCategory.create({
     *   data: {
     *     // ... data to create a JobCategory
     *   }
     * })
     * 
     */
    create<T extends JobCategoryCreateArgs>(args: SelectSubset<T, JobCategoryCreateArgs<ExtArgs>>): Prisma__JobCategoryClient<$Result.GetResult<Prisma.$JobCategoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many JobCategories.
     * @param {JobCategoryCreateManyArgs} args - Arguments to create many JobCategories.
     * @example
     * // Create many JobCategories
     * const jobCategory = await prisma.jobCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JobCategoryCreateManyArgs>(args?: SelectSubset<T, JobCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many JobCategories and returns the data saved in the database.
     * @param {JobCategoryCreateManyAndReturnArgs} args - Arguments to create many JobCategories.
     * @example
     * // Create many JobCategories
     * const jobCategory = await prisma.jobCategory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many JobCategories and only return the `id`
     * const jobCategoryWithIdOnly = await prisma.jobCategory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JobCategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, JobCategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobCategoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a JobCategory.
     * @param {JobCategoryDeleteArgs} args - Arguments to delete one JobCategory.
     * @example
     * // Delete one JobCategory
     * const JobCategory = await prisma.jobCategory.delete({
     *   where: {
     *     // ... filter to delete one JobCategory
     *   }
     * })
     * 
     */
    delete<T extends JobCategoryDeleteArgs>(args: SelectSubset<T, JobCategoryDeleteArgs<ExtArgs>>): Prisma__JobCategoryClient<$Result.GetResult<Prisma.$JobCategoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one JobCategory.
     * @param {JobCategoryUpdateArgs} args - Arguments to update one JobCategory.
     * @example
     * // Update one JobCategory
     * const jobCategory = await prisma.jobCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JobCategoryUpdateArgs>(args: SelectSubset<T, JobCategoryUpdateArgs<ExtArgs>>): Prisma__JobCategoryClient<$Result.GetResult<Prisma.$JobCategoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more JobCategories.
     * @param {JobCategoryDeleteManyArgs} args - Arguments to filter JobCategories to delete.
     * @example
     * // Delete a few JobCategories
     * const { count } = await prisma.jobCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JobCategoryDeleteManyArgs>(args?: SelectSubset<T, JobCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JobCategories
     * const jobCategory = await prisma.jobCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JobCategoryUpdateManyArgs>(args: SelectSubset<T, JobCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one JobCategory.
     * @param {JobCategoryUpsertArgs} args - Arguments to update or create a JobCategory.
     * @example
     * // Update or create a JobCategory
     * const jobCategory = await prisma.jobCategory.upsert({
     *   create: {
     *     // ... data to create a JobCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JobCategory we want to update
     *   }
     * })
     */
    upsert<T extends JobCategoryUpsertArgs>(args: SelectSubset<T, JobCategoryUpsertArgs<ExtArgs>>): Prisma__JobCategoryClient<$Result.GetResult<Prisma.$JobCategoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of JobCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobCategoryCountArgs} args - Arguments to filter JobCategories to count.
     * @example
     * // Count the number of JobCategories
     * const count = await prisma.jobCategory.count({
     *   where: {
     *     // ... the filter for the JobCategories we want to count
     *   }
     * })
    **/
    count<T extends JobCategoryCountArgs>(
      args?: Subset<T, JobCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JobCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobCategoryAggregateArgs>(args: Subset<T, JobCategoryAggregateArgs>): Prisma.PrismaPromise<GetJobCategoryAggregateType<T>>

    /**
     * Group by JobCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobCategoryGroupByArgs['orderBy'] }
        : { orderBy?: JobCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JobCategory model
   */
  readonly fields: JobCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JobCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    jobPostings<T extends JobCategory$jobPostingsArgs<ExtArgs> = {}>(args?: Subset<T, JobCategory$jobPostingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPostingPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the JobCategory model
   */ 
  interface JobCategoryFieldRefs {
    readonly id: FieldRef<"JobCategory", 'String'>
    readonly category: FieldRef<"JobCategory", 'String'>
    readonly name: FieldRef<"JobCategory", 'String'>
    readonly createdAt: FieldRef<"JobCategory", 'DateTime'>
    readonly updatedAt: FieldRef<"JobCategory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * JobCategory findUnique
   */
  export type JobCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobCategory
     */
    select?: JobCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobCategoryInclude<ExtArgs> | null
    /**
     * Filter, which JobCategory to fetch.
     */
    where: JobCategoryWhereUniqueInput
  }

  /**
   * JobCategory findUniqueOrThrow
   */
  export type JobCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobCategory
     */
    select?: JobCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobCategoryInclude<ExtArgs> | null
    /**
     * Filter, which JobCategory to fetch.
     */
    where: JobCategoryWhereUniqueInput
  }

  /**
   * JobCategory findFirst
   */
  export type JobCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobCategory
     */
    select?: JobCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobCategoryInclude<ExtArgs> | null
    /**
     * Filter, which JobCategory to fetch.
     */
    where?: JobCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobCategories to fetch.
     */
    orderBy?: JobCategoryOrderByWithRelationInput | JobCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobCategories.
     */
    cursor?: JobCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobCategories.
     */
    distinct?: JobCategoryScalarFieldEnum | JobCategoryScalarFieldEnum[]
  }

  /**
   * JobCategory findFirstOrThrow
   */
  export type JobCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobCategory
     */
    select?: JobCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobCategoryInclude<ExtArgs> | null
    /**
     * Filter, which JobCategory to fetch.
     */
    where?: JobCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobCategories to fetch.
     */
    orderBy?: JobCategoryOrderByWithRelationInput | JobCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobCategories.
     */
    cursor?: JobCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobCategories.
     */
    distinct?: JobCategoryScalarFieldEnum | JobCategoryScalarFieldEnum[]
  }

  /**
   * JobCategory findMany
   */
  export type JobCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobCategory
     */
    select?: JobCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobCategoryInclude<ExtArgs> | null
    /**
     * Filter, which JobCategories to fetch.
     */
    where?: JobCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobCategories to fetch.
     */
    orderBy?: JobCategoryOrderByWithRelationInput | JobCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JobCategories.
     */
    cursor?: JobCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobCategories.
     */
    skip?: number
    distinct?: JobCategoryScalarFieldEnum | JobCategoryScalarFieldEnum[]
  }

  /**
   * JobCategory create
   */
  export type JobCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobCategory
     */
    select?: JobCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a JobCategory.
     */
    data: XOR<JobCategoryCreateInput, JobCategoryUncheckedCreateInput>
  }

  /**
   * JobCategory createMany
   */
  export type JobCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JobCategories.
     */
    data: JobCategoryCreateManyInput | JobCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JobCategory createManyAndReturn
   */
  export type JobCategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobCategory
     */
    select?: JobCategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many JobCategories.
     */
    data: JobCategoryCreateManyInput | JobCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JobCategory update
   */
  export type JobCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobCategory
     */
    select?: JobCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a JobCategory.
     */
    data: XOR<JobCategoryUpdateInput, JobCategoryUncheckedUpdateInput>
    /**
     * Choose, which JobCategory to update.
     */
    where: JobCategoryWhereUniqueInput
  }

  /**
   * JobCategory updateMany
   */
  export type JobCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JobCategories.
     */
    data: XOR<JobCategoryUpdateManyMutationInput, JobCategoryUncheckedUpdateManyInput>
    /**
     * Filter which JobCategories to update
     */
    where?: JobCategoryWhereInput
  }

  /**
   * JobCategory upsert
   */
  export type JobCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobCategory
     */
    select?: JobCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the JobCategory to update in case it exists.
     */
    where: JobCategoryWhereUniqueInput
    /**
     * In case the JobCategory found by the `where` argument doesn't exist, create a new JobCategory with this data.
     */
    create: XOR<JobCategoryCreateInput, JobCategoryUncheckedCreateInput>
    /**
     * In case the JobCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobCategoryUpdateInput, JobCategoryUncheckedUpdateInput>
  }

  /**
   * JobCategory delete
   */
  export type JobCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobCategory
     */
    select?: JobCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobCategoryInclude<ExtArgs> | null
    /**
     * Filter which JobCategory to delete.
     */
    where: JobCategoryWhereUniqueInput
  }

  /**
   * JobCategory deleteMany
   */
  export type JobCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobCategories to delete
     */
    where?: JobCategoryWhereInput
  }

  /**
   * JobCategory.jobPostings
   */
  export type JobCategory$jobPostingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPosting
     */
    select?: JobPostingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPostingInclude<ExtArgs> | null
    where?: JobPostingWhereInput
    orderBy?: JobPostingOrderByWithRelationInput | JobPostingOrderByWithRelationInput[]
    cursor?: JobPostingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobPostingScalarFieldEnum | JobPostingScalarFieldEnum[]
  }

  /**
   * JobCategory without action
   */
  export type JobCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobCategory
     */
    select?: JobCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobCategoryInclude<ExtArgs> | null
  }


  /**
   * Model JobPosting
   */

  export type AggregateJobPosting = {
    _count: JobPostingCountAggregateOutputType | null
    _min: JobPostingMinAggregateOutputType | null
    _max: JobPostingMaxAggregateOutputType | null
  }

  export type JobPostingMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    hourlySalaryRange: string | null
    expiryDate: Date | null
    jobName: string | null
    createdAt: Date | null
    updatedAt: Date | null
    employerId: string | null
    jobCategoryId: string | null
  }

  export type JobPostingMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    hourlySalaryRange: string | null
    expiryDate: Date | null
    jobName: string | null
    createdAt: Date | null
    updatedAt: Date | null
    employerId: string | null
    jobCategoryId: string | null
  }

  export type JobPostingCountAggregateOutputType = {
    id: number
    title: number
    description: number
    hourlySalaryRange: number
    expiryDate: number
    jobName: number
    createdAt: number
    updatedAt: number
    employerId: number
    jobCategoryId: number
    _all: number
  }


  export type JobPostingMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    hourlySalaryRange?: true
    expiryDate?: true
    jobName?: true
    createdAt?: true
    updatedAt?: true
    employerId?: true
    jobCategoryId?: true
  }

  export type JobPostingMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    hourlySalaryRange?: true
    expiryDate?: true
    jobName?: true
    createdAt?: true
    updatedAt?: true
    employerId?: true
    jobCategoryId?: true
  }

  export type JobPostingCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    hourlySalaryRange?: true
    expiryDate?: true
    jobName?: true
    createdAt?: true
    updatedAt?: true
    employerId?: true
    jobCategoryId?: true
    _all?: true
  }

  export type JobPostingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobPosting to aggregate.
     */
    where?: JobPostingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobPostings to fetch.
     */
    orderBy?: JobPostingOrderByWithRelationInput | JobPostingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobPostingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobPostings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobPostings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JobPostings
    **/
    _count?: true | JobPostingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobPostingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobPostingMaxAggregateInputType
  }

  export type GetJobPostingAggregateType<T extends JobPostingAggregateArgs> = {
        [P in keyof T & keyof AggregateJobPosting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJobPosting[P]>
      : GetScalarType<T[P], AggregateJobPosting[P]>
  }




  export type JobPostingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobPostingWhereInput
    orderBy?: JobPostingOrderByWithAggregationInput | JobPostingOrderByWithAggregationInput[]
    by: JobPostingScalarFieldEnum[] | JobPostingScalarFieldEnum
    having?: JobPostingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobPostingCountAggregateInputType | true
    _min?: JobPostingMinAggregateInputType
    _max?: JobPostingMaxAggregateInputType
  }

  export type JobPostingGroupByOutputType = {
    id: string
    title: string
    description: string
    hourlySalaryRange: string
    expiryDate: Date
    jobName: string
    createdAt: Date
    updatedAt: Date
    employerId: string
    jobCategoryId: string
    _count: JobPostingCountAggregateOutputType | null
    _min: JobPostingMinAggregateOutputType | null
    _max: JobPostingMaxAggregateOutputType | null
  }

  type GetJobPostingGroupByPayload<T extends JobPostingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobPostingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobPostingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobPostingGroupByOutputType[P]>
            : GetScalarType<T[P], JobPostingGroupByOutputType[P]>
        }
      >
    >


  export type JobPostingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    hourlySalaryRange?: boolean
    expiryDate?: boolean
    jobName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employerId?: boolean
    jobCategoryId?: boolean
    employer?: boolean | EmployerDefaultArgs<ExtArgs>
    jobCategory?: boolean | JobCategoryDefaultArgs<ExtArgs>
    discardedJobs?: boolean | JobPosting$discardedJobsArgs<ExtArgs>
    likedJobs?: boolean | JobPosting$likedJobsArgs<ExtArgs>
    _count?: boolean | JobPostingCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobPosting"]>

  export type JobPostingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    hourlySalaryRange?: boolean
    expiryDate?: boolean
    jobName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employerId?: boolean
    jobCategoryId?: boolean
    employer?: boolean | EmployerDefaultArgs<ExtArgs>
    jobCategory?: boolean | JobCategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobPosting"]>

  export type JobPostingSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    hourlySalaryRange?: boolean
    expiryDate?: boolean
    jobName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employerId?: boolean
    jobCategoryId?: boolean
  }

  export type JobPostingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employer?: boolean | EmployerDefaultArgs<ExtArgs>
    jobCategory?: boolean | JobCategoryDefaultArgs<ExtArgs>
    discardedJobs?: boolean | JobPosting$discardedJobsArgs<ExtArgs>
    likedJobs?: boolean | JobPosting$likedJobsArgs<ExtArgs>
    _count?: boolean | JobPostingCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type JobPostingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employer?: boolean | EmployerDefaultArgs<ExtArgs>
    jobCategory?: boolean | JobCategoryDefaultArgs<ExtArgs>
  }

  export type $JobPostingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JobPosting"
    objects: {
      employer: Prisma.$EmployerPayload<ExtArgs>
      jobCategory: Prisma.$JobCategoryPayload<ExtArgs>
      discardedJobs: Prisma.$DiscardedJobPayload<ExtArgs>[]
      likedJobs: Prisma.$LikedJobPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      hourlySalaryRange: string
      expiryDate: Date
      jobName: string
      createdAt: Date
      updatedAt: Date
      employerId: string
      jobCategoryId: string
    }, ExtArgs["result"]["jobPosting"]>
    composites: {}
  }

  type JobPostingGetPayload<S extends boolean | null | undefined | JobPostingDefaultArgs> = $Result.GetResult<Prisma.$JobPostingPayload, S>

  type JobPostingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<JobPostingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: JobPostingCountAggregateInputType | true
    }

  export interface JobPostingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JobPosting'], meta: { name: 'JobPosting' } }
    /**
     * Find zero or one JobPosting that matches the filter.
     * @param {JobPostingFindUniqueArgs} args - Arguments to find a JobPosting
     * @example
     * // Get one JobPosting
     * const jobPosting = await prisma.jobPosting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JobPostingFindUniqueArgs>(args: SelectSubset<T, JobPostingFindUniqueArgs<ExtArgs>>): Prisma__JobPostingClient<$Result.GetResult<Prisma.$JobPostingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one JobPosting that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {JobPostingFindUniqueOrThrowArgs} args - Arguments to find a JobPosting
     * @example
     * // Get one JobPosting
     * const jobPosting = await prisma.jobPosting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JobPostingFindUniqueOrThrowArgs>(args: SelectSubset<T, JobPostingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JobPostingClient<$Result.GetResult<Prisma.$JobPostingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first JobPosting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostingFindFirstArgs} args - Arguments to find a JobPosting
     * @example
     * // Get one JobPosting
     * const jobPosting = await prisma.jobPosting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JobPostingFindFirstArgs>(args?: SelectSubset<T, JobPostingFindFirstArgs<ExtArgs>>): Prisma__JobPostingClient<$Result.GetResult<Prisma.$JobPostingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first JobPosting that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostingFindFirstOrThrowArgs} args - Arguments to find a JobPosting
     * @example
     * // Get one JobPosting
     * const jobPosting = await prisma.jobPosting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JobPostingFindFirstOrThrowArgs>(args?: SelectSubset<T, JobPostingFindFirstOrThrowArgs<ExtArgs>>): Prisma__JobPostingClient<$Result.GetResult<Prisma.$JobPostingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more JobPostings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JobPostings
     * const jobPostings = await prisma.jobPosting.findMany()
     * 
     * // Get first 10 JobPostings
     * const jobPostings = await prisma.jobPosting.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobPostingWithIdOnly = await prisma.jobPosting.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JobPostingFindManyArgs>(args?: SelectSubset<T, JobPostingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPostingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a JobPosting.
     * @param {JobPostingCreateArgs} args - Arguments to create a JobPosting.
     * @example
     * // Create one JobPosting
     * const JobPosting = await prisma.jobPosting.create({
     *   data: {
     *     // ... data to create a JobPosting
     *   }
     * })
     * 
     */
    create<T extends JobPostingCreateArgs>(args: SelectSubset<T, JobPostingCreateArgs<ExtArgs>>): Prisma__JobPostingClient<$Result.GetResult<Prisma.$JobPostingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many JobPostings.
     * @param {JobPostingCreateManyArgs} args - Arguments to create many JobPostings.
     * @example
     * // Create many JobPostings
     * const jobPosting = await prisma.jobPosting.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JobPostingCreateManyArgs>(args?: SelectSubset<T, JobPostingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many JobPostings and returns the data saved in the database.
     * @param {JobPostingCreateManyAndReturnArgs} args - Arguments to create many JobPostings.
     * @example
     * // Create many JobPostings
     * const jobPosting = await prisma.jobPosting.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many JobPostings and only return the `id`
     * const jobPostingWithIdOnly = await prisma.jobPosting.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JobPostingCreateManyAndReturnArgs>(args?: SelectSubset<T, JobPostingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPostingPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a JobPosting.
     * @param {JobPostingDeleteArgs} args - Arguments to delete one JobPosting.
     * @example
     * // Delete one JobPosting
     * const JobPosting = await prisma.jobPosting.delete({
     *   where: {
     *     // ... filter to delete one JobPosting
     *   }
     * })
     * 
     */
    delete<T extends JobPostingDeleteArgs>(args: SelectSubset<T, JobPostingDeleteArgs<ExtArgs>>): Prisma__JobPostingClient<$Result.GetResult<Prisma.$JobPostingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one JobPosting.
     * @param {JobPostingUpdateArgs} args - Arguments to update one JobPosting.
     * @example
     * // Update one JobPosting
     * const jobPosting = await prisma.jobPosting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JobPostingUpdateArgs>(args: SelectSubset<T, JobPostingUpdateArgs<ExtArgs>>): Prisma__JobPostingClient<$Result.GetResult<Prisma.$JobPostingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more JobPostings.
     * @param {JobPostingDeleteManyArgs} args - Arguments to filter JobPostings to delete.
     * @example
     * // Delete a few JobPostings
     * const { count } = await prisma.jobPosting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JobPostingDeleteManyArgs>(args?: SelectSubset<T, JobPostingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobPostings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JobPostings
     * const jobPosting = await prisma.jobPosting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JobPostingUpdateManyArgs>(args: SelectSubset<T, JobPostingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one JobPosting.
     * @param {JobPostingUpsertArgs} args - Arguments to update or create a JobPosting.
     * @example
     * // Update or create a JobPosting
     * const jobPosting = await prisma.jobPosting.upsert({
     *   create: {
     *     // ... data to create a JobPosting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JobPosting we want to update
     *   }
     * })
     */
    upsert<T extends JobPostingUpsertArgs>(args: SelectSubset<T, JobPostingUpsertArgs<ExtArgs>>): Prisma__JobPostingClient<$Result.GetResult<Prisma.$JobPostingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of JobPostings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostingCountArgs} args - Arguments to filter JobPostings to count.
     * @example
     * // Count the number of JobPostings
     * const count = await prisma.jobPosting.count({
     *   where: {
     *     // ... the filter for the JobPostings we want to count
     *   }
     * })
    **/
    count<T extends JobPostingCountArgs>(
      args?: Subset<T, JobPostingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobPostingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JobPosting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobPostingAggregateArgs>(args: Subset<T, JobPostingAggregateArgs>): Prisma.PrismaPromise<GetJobPostingAggregateType<T>>

    /**
     * Group by JobPosting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobPostingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobPostingGroupByArgs['orderBy'] }
        : { orderBy?: JobPostingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobPostingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobPostingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JobPosting model
   */
  readonly fields: JobPostingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JobPosting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobPostingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employer<T extends EmployerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployerDefaultArgs<ExtArgs>>): Prisma__EmployerClient<$Result.GetResult<Prisma.$EmployerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    jobCategory<T extends JobCategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobCategoryDefaultArgs<ExtArgs>>): Prisma__JobCategoryClient<$Result.GetResult<Prisma.$JobCategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    discardedJobs<T extends JobPosting$discardedJobsArgs<ExtArgs> = {}>(args?: Subset<T, JobPosting$discardedJobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscardedJobPayload<ExtArgs>, T, "findMany"> | Null>
    likedJobs<T extends JobPosting$likedJobsArgs<ExtArgs> = {}>(args?: Subset<T, JobPosting$likedJobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikedJobPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the JobPosting model
   */ 
  interface JobPostingFieldRefs {
    readonly id: FieldRef<"JobPosting", 'String'>
    readonly title: FieldRef<"JobPosting", 'String'>
    readonly description: FieldRef<"JobPosting", 'String'>
    readonly hourlySalaryRange: FieldRef<"JobPosting", 'String'>
    readonly expiryDate: FieldRef<"JobPosting", 'DateTime'>
    readonly jobName: FieldRef<"JobPosting", 'String'>
    readonly createdAt: FieldRef<"JobPosting", 'DateTime'>
    readonly updatedAt: FieldRef<"JobPosting", 'DateTime'>
    readonly employerId: FieldRef<"JobPosting", 'String'>
    readonly jobCategoryId: FieldRef<"JobPosting", 'String'>
  }
    

  // Custom InputTypes
  /**
   * JobPosting findUnique
   */
  export type JobPostingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPosting
     */
    select?: JobPostingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPostingInclude<ExtArgs> | null
    /**
     * Filter, which JobPosting to fetch.
     */
    where: JobPostingWhereUniqueInput
  }

  /**
   * JobPosting findUniqueOrThrow
   */
  export type JobPostingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPosting
     */
    select?: JobPostingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPostingInclude<ExtArgs> | null
    /**
     * Filter, which JobPosting to fetch.
     */
    where: JobPostingWhereUniqueInput
  }

  /**
   * JobPosting findFirst
   */
  export type JobPostingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPosting
     */
    select?: JobPostingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPostingInclude<ExtArgs> | null
    /**
     * Filter, which JobPosting to fetch.
     */
    where?: JobPostingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobPostings to fetch.
     */
    orderBy?: JobPostingOrderByWithRelationInput | JobPostingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobPostings.
     */
    cursor?: JobPostingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobPostings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobPostings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobPostings.
     */
    distinct?: JobPostingScalarFieldEnum | JobPostingScalarFieldEnum[]
  }

  /**
   * JobPosting findFirstOrThrow
   */
  export type JobPostingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPosting
     */
    select?: JobPostingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPostingInclude<ExtArgs> | null
    /**
     * Filter, which JobPosting to fetch.
     */
    where?: JobPostingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobPostings to fetch.
     */
    orderBy?: JobPostingOrderByWithRelationInput | JobPostingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobPostings.
     */
    cursor?: JobPostingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobPostings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobPostings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobPostings.
     */
    distinct?: JobPostingScalarFieldEnum | JobPostingScalarFieldEnum[]
  }

  /**
   * JobPosting findMany
   */
  export type JobPostingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPosting
     */
    select?: JobPostingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPostingInclude<ExtArgs> | null
    /**
     * Filter, which JobPostings to fetch.
     */
    where?: JobPostingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobPostings to fetch.
     */
    orderBy?: JobPostingOrderByWithRelationInput | JobPostingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JobPostings.
     */
    cursor?: JobPostingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobPostings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobPostings.
     */
    skip?: number
    distinct?: JobPostingScalarFieldEnum | JobPostingScalarFieldEnum[]
  }

  /**
   * JobPosting create
   */
  export type JobPostingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPosting
     */
    select?: JobPostingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPostingInclude<ExtArgs> | null
    /**
     * The data needed to create a JobPosting.
     */
    data: XOR<JobPostingCreateInput, JobPostingUncheckedCreateInput>
  }

  /**
   * JobPosting createMany
   */
  export type JobPostingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JobPostings.
     */
    data: JobPostingCreateManyInput | JobPostingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JobPosting createManyAndReturn
   */
  export type JobPostingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPosting
     */
    select?: JobPostingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many JobPostings.
     */
    data: JobPostingCreateManyInput | JobPostingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPostingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * JobPosting update
   */
  export type JobPostingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPosting
     */
    select?: JobPostingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPostingInclude<ExtArgs> | null
    /**
     * The data needed to update a JobPosting.
     */
    data: XOR<JobPostingUpdateInput, JobPostingUncheckedUpdateInput>
    /**
     * Choose, which JobPosting to update.
     */
    where: JobPostingWhereUniqueInput
  }

  /**
   * JobPosting updateMany
   */
  export type JobPostingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JobPostings.
     */
    data: XOR<JobPostingUpdateManyMutationInput, JobPostingUncheckedUpdateManyInput>
    /**
     * Filter which JobPostings to update
     */
    where?: JobPostingWhereInput
  }

  /**
   * JobPosting upsert
   */
  export type JobPostingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPosting
     */
    select?: JobPostingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPostingInclude<ExtArgs> | null
    /**
     * The filter to search for the JobPosting to update in case it exists.
     */
    where: JobPostingWhereUniqueInput
    /**
     * In case the JobPosting found by the `where` argument doesn't exist, create a new JobPosting with this data.
     */
    create: XOR<JobPostingCreateInput, JobPostingUncheckedCreateInput>
    /**
     * In case the JobPosting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobPostingUpdateInput, JobPostingUncheckedUpdateInput>
  }

  /**
   * JobPosting delete
   */
  export type JobPostingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPosting
     */
    select?: JobPostingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPostingInclude<ExtArgs> | null
    /**
     * Filter which JobPosting to delete.
     */
    where: JobPostingWhereUniqueInput
  }

  /**
   * JobPosting deleteMany
   */
  export type JobPostingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobPostings to delete
     */
    where?: JobPostingWhereInput
  }

  /**
   * JobPosting.discardedJobs
   */
  export type JobPosting$discardedJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscardedJob
     */
    select?: DiscardedJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscardedJobInclude<ExtArgs> | null
    where?: DiscardedJobWhereInput
    orderBy?: DiscardedJobOrderByWithRelationInput | DiscardedJobOrderByWithRelationInput[]
    cursor?: DiscardedJobWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DiscardedJobScalarFieldEnum | DiscardedJobScalarFieldEnum[]
  }

  /**
   * JobPosting.likedJobs
   */
  export type JobPosting$likedJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikedJob
     */
    select?: LikedJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikedJobInclude<ExtArgs> | null
    where?: LikedJobWhereInput
    orderBy?: LikedJobOrderByWithRelationInput | LikedJobOrderByWithRelationInput[]
    cursor?: LikedJobWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LikedJobScalarFieldEnum | LikedJobScalarFieldEnum[]
  }

  /**
   * JobPosting without action
   */
  export type JobPostingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPosting
     */
    select?: JobPostingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPostingInclude<ExtArgs> | null
  }


  /**
   * Model DiscardedJob
   */

  export type AggregateDiscardedJob = {
    _count: DiscardedJobCountAggregateOutputType | null
    _min: DiscardedJobMinAggregateOutputType | null
    _max: DiscardedJobMaxAggregateOutputType | null
  }

  export type DiscardedJobMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    jobId: string | null
    applicantId: string | null
  }

  export type DiscardedJobMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    jobId: string | null
    applicantId: string | null
  }

  export type DiscardedJobCountAggregateOutputType = {
    id: number
    createdAt: number
    jobId: number
    applicantId: number
    _all: number
  }


  export type DiscardedJobMinAggregateInputType = {
    id?: true
    createdAt?: true
    jobId?: true
    applicantId?: true
  }

  export type DiscardedJobMaxAggregateInputType = {
    id?: true
    createdAt?: true
    jobId?: true
    applicantId?: true
  }

  export type DiscardedJobCountAggregateInputType = {
    id?: true
    createdAt?: true
    jobId?: true
    applicantId?: true
    _all?: true
  }

  export type DiscardedJobAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DiscardedJob to aggregate.
     */
    where?: DiscardedJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiscardedJobs to fetch.
     */
    orderBy?: DiscardedJobOrderByWithRelationInput | DiscardedJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DiscardedJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiscardedJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiscardedJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DiscardedJobs
    **/
    _count?: true | DiscardedJobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DiscardedJobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DiscardedJobMaxAggregateInputType
  }

  export type GetDiscardedJobAggregateType<T extends DiscardedJobAggregateArgs> = {
        [P in keyof T & keyof AggregateDiscardedJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDiscardedJob[P]>
      : GetScalarType<T[P], AggregateDiscardedJob[P]>
  }




  export type DiscardedJobGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiscardedJobWhereInput
    orderBy?: DiscardedJobOrderByWithAggregationInput | DiscardedJobOrderByWithAggregationInput[]
    by: DiscardedJobScalarFieldEnum[] | DiscardedJobScalarFieldEnum
    having?: DiscardedJobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DiscardedJobCountAggregateInputType | true
    _min?: DiscardedJobMinAggregateInputType
    _max?: DiscardedJobMaxAggregateInputType
  }

  export type DiscardedJobGroupByOutputType = {
    id: string
    createdAt: Date
    jobId: string
    applicantId: string
    _count: DiscardedJobCountAggregateOutputType | null
    _min: DiscardedJobMinAggregateOutputType | null
    _max: DiscardedJobMaxAggregateOutputType | null
  }

  type GetDiscardedJobGroupByPayload<T extends DiscardedJobGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DiscardedJobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DiscardedJobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DiscardedJobGroupByOutputType[P]>
            : GetScalarType<T[P], DiscardedJobGroupByOutputType[P]>
        }
      >
    >


  export type DiscardedJobSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    jobId?: boolean
    applicantId?: boolean
    jobPosting?: boolean | JobPostingDefaultArgs<ExtArgs>
    applicant?: boolean | ApplicantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["discardedJob"]>

  export type DiscardedJobSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    jobId?: boolean
    applicantId?: boolean
    jobPosting?: boolean | JobPostingDefaultArgs<ExtArgs>
    applicant?: boolean | ApplicantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["discardedJob"]>

  export type DiscardedJobSelectScalar = {
    id?: boolean
    createdAt?: boolean
    jobId?: boolean
    applicantId?: boolean
  }

  export type DiscardedJobInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobPosting?: boolean | JobPostingDefaultArgs<ExtArgs>
    applicant?: boolean | ApplicantDefaultArgs<ExtArgs>
  }
  export type DiscardedJobIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobPosting?: boolean | JobPostingDefaultArgs<ExtArgs>
    applicant?: boolean | ApplicantDefaultArgs<ExtArgs>
  }

  export type $DiscardedJobPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DiscardedJob"
    objects: {
      jobPosting: Prisma.$JobPostingPayload<ExtArgs>
      applicant: Prisma.$ApplicantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      jobId: string
      applicantId: string
    }, ExtArgs["result"]["discardedJob"]>
    composites: {}
  }

  type DiscardedJobGetPayload<S extends boolean | null | undefined | DiscardedJobDefaultArgs> = $Result.GetResult<Prisma.$DiscardedJobPayload, S>

  type DiscardedJobCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DiscardedJobFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DiscardedJobCountAggregateInputType | true
    }

  export interface DiscardedJobDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DiscardedJob'], meta: { name: 'DiscardedJob' } }
    /**
     * Find zero or one DiscardedJob that matches the filter.
     * @param {DiscardedJobFindUniqueArgs} args - Arguments to find a DiscardedJob
     * @example
     * // Get one DiscardedJob
     * const discardedJob = await prisma.discardedJob.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DiscardedJobFindUniqueArgs>(args: SelectSubset<T, DiscardedJobFindUniqueArgs<ExtArgs>>): Prisma__DiscardedJobClient<$Result.GetResult<Prisma.$DiscardedJobPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DiscardedJob that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DiscardedJobFindUniqueOrThrowArgs} args - Arguments to find a DiscardedJob
     * @example
     * // Get one DiscardedJob
     * const discardedJob = await prisma.discardedJob.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DiscardedJobFindUniqueOrThrowArgs>(args: SelectSubset<T, DiscardedJobFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DiscardedJobClient<$Result.GetResult<Prisma.$DiscardedJobPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DiscardedJob that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscardedJobFindFirstArgs} args - Arguments to find a DiscardedJob
     * @example
     * // Get one DiscardedJob
     * const discardedJob = await prisma.discardedJob.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DiscardedJobFindFirstArgs>(args?: SelectSubset<T, DiscardedJobFindFirstArgs<ExtArgs>>): Prisma__DiscardedJobClient<$Result.GetResult<Prisma.$DiscardedJobPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DiscardedJob that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscardedJobFindFirstOrThrowArgs} args - Arguments to find a DiscardedJob
     * @example
     * // Get one DiscardedJob
     * const discardedJob = await prisma.discardedJob.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DiscardedJobFindFirstOrThrowArgs>(args?: SelectSubset<T, DiscardedJobFindFirstOrThrowArgs<ExtArgs>>): Prisma__DiscardedJobClient<$Result.GetResult<Prisma.$DiscardedJobPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DiscardedJobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscardedJobFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DiscardedJobs
     * const discardedJobs = await prisma.discardedJob.findMany()
     * 
     * // Get first 10 DiscardedJobs
     * const discardedJobs = await prisma.discardedJob.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const discardedJobWithIdOnly = await prisma.discardedJob.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DiscardedJobFindManyArgs>(args?: SelectSubset<T, DiscardedJobFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscardedJobPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DiscardedJob.
     * @param {DiscardedJobCreateArgs} args - Arguments to create a DiscardedJob.
     * @example
     * // Create one DiscardedJob
     * const DiscardedJob = await prisma.discardedJob.create({
     *   data: {
     *     // ... data to create a DiscardedJob
     *   }
     * })
     * 
     */
    create<T extends DiscardedJobCreateArgs>(args: SelectSubset<T, DiscardedJobCreateArgs<ExtArgs>>): Prisma__DiscardedJobClient<$Result.GetResult<Prisma.$DiscardedJobPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DiscardedJobs.
     * @param {DiscardedJobCreateManyArgs} args - Arguments to create many DiscardedJobs.
     * @example
     * // Create many DiscardedJobs
     * const discardedJob = await prisma.discardedJob.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DiscardedJobCreateManyArgs>(args?: SelectSubset<T, DiscardedJobCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DiscardedJobs and returns the data saved in the database.
     * @param {DiscardedJobCreateManyAndReturnArgs} args - Arguments to create many DiscardedJobs.
     * @example
     * // Create many DiscardedJobs
     * const discardedJob = await prisma.discardedJob.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DiscardedJobs and only return the `id`
     * const discardedJobWithIdOnly = await prisma.discardedJob.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DiscardedJobCreateManyAndReturnArgs>(args?: SelectSubset<T, DiscardedJobCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscardedJobPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DiscardedJob.
     * @param {DiscardedJobDeleteArgs} args - Arguments to delete one DiscardedJob.
     * @example
     * // Delete one DiscardedJob
     * const DiscardedJob = await prisma.discardedJob.delete({
     *   where: {
     *     // ... filter to delete one DiscardedJob
     *   }
     * })
     * 
     */
    delete<T extends DiscardedJobDeleteArgs>(args: SelectSubset<T, DiscardedJobDeleteArgs<ExtArgs>>): Prisma__DiscardedJobClient<$Result.GetResult<Prisma.$DiscardedJobPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DiscardedJob.
     * @param {DiscardedJobUpdateArgs} args - Arguments to update one DiscardedJob.
     * @example
     * // Update one DiscardedJob
     * const discardedJob = await prisma.discardedJob.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DiscardedJobUpdateArgs>(args: SelectSubset<T, DiscardedJobUpdateArgs<ExtArgs>>): Prisma__DiscardedJobClient<$Result.GetResult<Prisma.$DiscardedJobPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DiscardedJobs.
     * @param {DiscardedJobDeleteManyArgs} args - Arguments to filter DiscardedJobs to delete.
     * @example
     * // Delete a few DiscardedJobs
     * const { count } = await prisma.discardedJob.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DiscardedJobDeleteManyArgs>(args?: SelectSubset<T, DiscardedJobDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DiscardedJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscardedJobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DiscardedJobs
     * const discardedJob = await prisma.discardedJob.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DiscardedJobUpdateManyArgs>(args: SelectSubset<T, DiscardedJobUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DiscardedJob.
     * @param {DiscardedJobUpsertArgs} args - Arguments to update or create a DiscardedJob.
     * @example
     * // Update or create a DiscardedJob
     * const discardedJob = await prisma.discardedJob.upsert({
     *   create: {
     *     // ... data to create a DiscardedJob
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DiscardedJob we want to update
     *   }
     * })
     */
    upsert<T extends DiscardedJobUpsertArgs>(args: SelectSubset<T, DiscardedJobUpsertArgs<ExtArgs>>): Prisma__DiscardedJobClient<$Result.GetResult<Prisma.$DiscardedJobPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DiscardedJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscardedJobCountArgs} args - Arguments to filter DiscardedJobs to count.
     * @example
     * // Count the number of DiscardedJobs
     * const count = await prisma.discardedJob.count({
     *   where: {
     *     // ... the filter for the DiscardedJobs we want to count
     *   }
     * })
    **/
    count<T extends DiscardedJobCountArgs>(
      args?: Subset<T, DiscardedJobCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DiscardedJobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DiscardedJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscardedJobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DiscardedJobAggregateArgs>(args: Subset<T, DiscardedJobAggregateArgs>): Prisma.PrismaPromise<GetDiscardedJobAggregateType<T>>

    /**
     * Group by DiscardedJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscardedJobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DiscardedJobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DiscardedJobGroupByArgs['orderBy'] }
        : { orderBy?: DiscardedJobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DiscardedJobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscardedJobGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DiscardedJob model
   */
  readonly fields: DiscardedJobFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DiscardedJob.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DiscardedJobClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    jobPosting<T extends JobPostingDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobPostingDefaultArgs<ExtArgs>>): Prisma__JobPostingClient<$Result.GetResult<Prisma.$JobPostingPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    applicant<T extends ApplicantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ApplicantDefaultArgs<ExtArgs>>): Prisma__ApplicantClient<$Result.GetResult<Prisma.$ApplicantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DiscardedJob model
   */ 
  interface DiscardedJobFieldRefs {
    readonly id: FieldRef<"DiscardedJob", 'String'>
    readonly createdAt: FieldRef<"DiscardedJob", 'DateTime'>
    readonly jobId: FieldRef<"DiscardedJob", 'String'>
    readonly applicantId: FieldRef<"DiscardedJob", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DiscardedJob findUnique
   */
  export type DiscardedJobFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscardedJob
     */
    select?: DiscardedJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscardedJobInclude<ExtArgs> | null
    /**
     * Filter, which DiscardedJob to fetch.
     */
    where: DiscardedJobWhereUniqueInput
  }

  /**
   * DiscardedJob findUniqueOrThrow
   */
  export type DiscardedJobFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscardedJob
     */
    select?: DiscardedJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscardedJobInclude<ExtArgs> | null
    /**
     * Filter, which DiscardedJob to fetch.
     */
    where: DiscardedJobWhereUniqueInput
  }

  /**
   * DiscardedJob findFirst
   */
  export type DiscardedJobFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscardedJob
     */
    select?: DiscardedJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscardedJobInclude<ExtArgs> | null
    /**
     * Filter, which DiscardedJob to fetch.
     */
    where?: DiscardedJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiscardedJobs to fetch.
     */
    orderBy?: DiscardedJobOrderByWithRelationInput | DiscardedJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DiscardedJobs.
     */
    cursor?: DiscardedJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiscardedJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiscardedJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DiscardedJobs.
     */
    distinct?: DiscardedJobScalarFieldEnum | DiscardedJobScalarFieldEnum[]
  }

  /**
   * DiscardedJob findFirstOrThrow
   */
  export type DiscardedJobFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscardedJob
     */
    select?: DiscardedJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscardedJobInclude<ExtArgs> | null
    /**
     * Filter, which DiscardedJob to fetch.
     */
    where?: DiscardedJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiscardedJobs to fetch.
     */
    orderBy?: DiscardedJobOrderByWithRelationInput | DiscardedJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DiscardedJobs.
     */
    cursor?: DiscardedJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiscardedJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiscardedJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DiscardedJobs.
     */
    distinct?: DiscardedJobScalarFieldEnum | DiscardedJobScalarFieldEnum[]
  }

  /**
   * DiscardedJob findMany
   */
  export type DiscardedJobFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscardedJob
     */
    select?: DiscardedJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscardedJobInclude<ExtArgs> | null
    /**
     * Filter, which DiscardedJobs to fetch.
     */
    where?: DiscardedJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiscardedJobs to fetch.
     */
    orderBy?: DiscardedJobOrderByWithRelationInput | DiscardedJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DiscardedJobs.
     */
    cursor?: DiscardedJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiscardedJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiscardedJobs.
     */
    skip?: number
    distinct?: DiscardedJobScalarFieldEnum | DiscardedJobScalarFieldEnum[]
  }

  /**
   * DiscardedJob create
   */
  export type DiscardedJobCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscardedJob
     */
    select?: DiscardedJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscardedJobInclude<ExtArgs> | null
    /**
     * The data needed to create a DiscardedJob.
     */
    data: XOR<DiscardedJobCreateInput, DiscardedJobUncheckedCreateInput>
  }

  /**
   * DiscardedJob createMany
   */
  export type DiscardedJobCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DiscardedJobs.
     */
    data: DiscardedJobCreateManyInput | DiscardedJobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DiscardedJob createManyAndReturn
   */
  export type DiscardedJobCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscardedJob
     */
    select?: DiscardedJobSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DiscardedJobs.
     */
    data: DiscardedJobCreateManyInput | DiscardedJobCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscardedJobIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DiscardedJob update
   */
  export type DiscardedJobUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscardedJob
     */
    select?: DiscardedJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscardedJobInclude<ExtArgs> | null
    /**
     * The data needed to update a DiscardedJob.
     */
    data: XOR<DiscardedJobUpdateInput, DiscardedJobUncheckedUpdateInput>
    /**
     * Choose, which DiscardedJob to update.
     */
    where: DiscardedJobWhereUniqueInput
  }

  /**
   * DiscardedJob updateMany
   */
  export type DiscardedJobUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DiscardedJobs.
     */
    data: XOR<DiscardedJobUpdateManyMutationInput, DiscardedJobUncheckedUpdateManyInput>
    /**
     * Filter which DiscardedJobs to update
     */
    where?: DiscardedJobWhereInput
  }

  /**
   * DiscardedJob upsert
   */
  export type DiscardedJobUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscardedJob
     */
    select?: DiscardedJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscardedJobInclude<ExtArgs> | null
    /**
     * The filter to search for the DiscardedJob to update in case it exists.
     */
    where: DiscardedJobWhereUniqueInput
    /**
     * In case the DiscardedJob found by the `where` argument doesn't exist, create a new DiscardedJob with this data.
     */
    create: XOR<DiscardedJobCreateInput, DiscardedJobUncheckedCreateInput>
    /**
     * In case the DiscardedJob was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DiscardedJobUpdateInput, DiscardedJobUncheckedUpdateInput>
  }

  /**
   * DiscardedJob delete
   */
  export type DiscardedJobDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscardedJob
     */
    select?: DiscardedJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscardedJobInclude<ExtArgs> | null
    /**
     * Filter which DiscardedJob to delete.
     */
    where: DiscardedJobWhereUniqueInput
  }

  /**
   * DiscardedJob deleteMany
   */
  export type DiscardedJobDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DiscardedJobs to delete
     */
    where?: DiscardedJobWhereInput
  }

  /**
   * DiscardedJob without action
   */
  export type DiscardedJobDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscardedJob
     */
    select?: DiscardedJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscardedJobInclude<ExtArgs> | null
  }


  /**
   * Model LikedJob
   */

  export type AggregateLikedJob = {
    _count: LikedJobCountAggregateOutputType | null
    _min: LikedJobMinAggregateOutputType | null
    _max: LikedJobMaxAggregateOutputType | null
  }

  export type LikedJobMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    jobId: string | null
    applicantId: string | null
  }

  export type LikedJobMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    jobId: string | null
    applicantId: string | null
  }

  export type LikedJobCountAggregateOutputType = {
    id: number
    createdAt: number
    jobId: number
    applicantId: number
    _all: number
  }


  export type LikedJobMinAggregateInputType = {
    id?: true
    createdAt?: true
    jobId?: true
    applicantId?: true
  }

  export type LikedJobMaxAggregateInputType = {
    id?: true
    createdAt?: true
    jobId?: true
    applicantId?: true
  }

  export type LikedJobCountAggregateInputType = {
    id?: true
    createdAt?: true
    jobId?: true
    applicantId?: true
    _all?: true
  }

  export type LikedJobAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LikedJob to aggregate.
     */
    where?: LikedJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LikedJobs to fetch.
     */
    orderBy?: LikedJobOrderByWithRelationInput | LikedJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LikedJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LikedJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LikedJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LikedJobs
    **/
    _count?: true | LikedJobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LikedJobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LikedJobMaxAggregateInputType
  }

  export type GetLikedJobAggregateType<T extends LikedJobAggregateArgs> = {
        [P in keyof T & keyof AggregateLikedJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLikedJob[P]>
      : GetScalarType<T[P], AggregateLikedJob[P]>
  }




  export type LikedJobGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikedJobWhereInput
    orderBy?: LikedJobOrderByWithAggregationInput | LikedJobOrderByWithAggregationInput[]
    by: LikedJobScalarFieldEnum[] | LikedJobScalarFieldEnum
    having?: LikedJobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LikedJobCountAggregateInputType | true
    _min?: LikedJobMinAggregateInputType
    _max?: LikedJobMaxAggregateInputType
  }

  export type LikedJobGroupByOutputType = {
    id: string
    createdAt: Date
    jobId: string
    applicantId: string
    _count: LikedJobCountAggregateOutputType | null
    _min: LikedJobMinAggregateOutputType | null
    _max: LikedJobMaxAggregateOutputType | null
  }

  type GetLikedJobGroupByPayload<T extends LikedJobGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LikedJobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LikedJobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LikedJobGroupByOutputType[P]>
            : GetScalarType<T[P], LikedJobGroupByOutputType[P]>
        }
      >
    >


  export type LikedJobSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    jobId?: boolean
    applicantId?: boolean
    jobPosting?: boolean | JobPostingDefaultArgs<ExtArgs>
    applicant?: boolean | ApplicantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["likedJob"]>

  export type LikedJobSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    jobId?: boolean
    applicantId?: boolean
    jobPosting?: boolean | JobPostingDefaultArgs<ExtArgs>
    applicant?: boolean | ApplicantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["likedJob"]>

  export type LikedJobSelectScalar = {
    id?: boolean
    createdAt?: boolean
    jobId?: boolean
    applicantId?: boolean
  }

  export type LikedJobInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobPosting?: boolean | JobPostingDefaultArgs<ExtArgs>
    applicant?: boolean | ApplicantDefaultArgs<ExtArgs>
  }
  export type LikedJobIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobPosting?: boolean | JobPostingDefaultArgs<ExtArgs>
    applicant?: boolean | ApplicantDefaultArgs<ExtArgs>
  }

  export type $LikedJobPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LikedJob"
    objects: {
      jobPosting: Prisma.$JobPostingPayload<ExtArgs>
      applicant: Prisma.$ApplicantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      jobId: string
      applicantId: string
    }, ExtArgs["result"]["likedJob"]>
    composites: {}
  }

  type LikedJobGetPayload<S extends boolean | null | undefined | LikedJobDefaultArgs> = $Result.GetResult<Prisma.$LikedJobPayload, S>

  type LikedJobCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LikedJobFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LikedJobCountAggregateInputType | true
    }

  export interface LikedJobDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LikedJob'], meta: { name: 'LikedJob' } }
    /**
     * Find zero or one LikedJob that matches the filter.
     * @param {LikedJobFindUniqueArgs} args - Arguments to find a LikedJob
     * @example
     * // Get one LikedJob
     * const likedJob = await prisma.likedJob.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LikedJobFindUniqueArgs>(args: SelectSubset<T, LikedJobFindUniqueArgs<ExtArgs>>): Prisma__LikedJobClient<$Result.GetResult<Prisma.$LikedJobPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one LikedJob that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LikedJobFindUniqueOrThrowArgs} args - Arguments to find a LikedJob
     * @example
     * // Get one LikedJob
     * const likedJob = await prisma.likedJob.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LikedJobFindUniqueOrThrowArgs>(args: SelectSubset<T, LikedJobFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LikedJobClient<$Result.GetResult<Prisma.$LikedJobPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first LikedJob that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikedJobFindFirstArgs} args - Arguments to find a LikedJob
     * @example
     * // Get one LikedJob
     * const likedJob = await prisma.likedJob.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LikedJobFindFirstArgs>(args?: SelectSubset<T, LikedJobFindFirstArgs<ExtArgs>>): Prisma__LikedJobClient<$Result.GetResult<Prisma.$LikedJobPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first LikedJob that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikedJobFindFirstOrThrowArgs} args - Arguments to find a LikedJob
     * @example
     * // Get one LikedJob
     * const likedJob = await prisma.likedJob.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LikedJobFindFirstOrThrowArgs>(args?: SelectSubset<T, LikedJobFindFirstOrThrowArgs<ExtArgs>>): Prisma__LikedJobClient<$Result.GetResult<Prisma.$LikedJobPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more LikedJobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikedJobFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LikedJobs
     * const likedJobs = await prisma.likedJob.findMany()
     * 
     * // Get first 10 LikedJobs
     * const likedJobs = await prisma.likedJob.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const likedJobWithIdOnly = await prisma.likedJob.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LikedJobFindManyArgs>(args?: SelectSubset<T, LikedJobFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikedJobPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a LikedJob.
     * @param {LikedJobCreateArgs} args - Arguments to create a LikedJob.
     * @example
     * // Create one LikedJob
     * const LikedJob = await prisma.likedJob.create({
     *   data: {
     *     // ... data to create a LikedJob
     *   }
     * })
     * 
     */
    create<T extends LikedJobCreateArgs>(args: SelectSubset<T, LikedJobCreateArgs<ExtArgs>>): Prisma__LikedJobClient<$Result.GetResult<Prisma.$LikedJobPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many LikedJobs.
     * @param {LikedJobCreateManyArgs} args - Arguments to create many LikedJobs.
     * @example
     * // Create many LikedJobs
     * const likedJob = await prisma.likedJob.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LikedJobCreateManyArgs>(args?: SelectSubset<T, LikedJobCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LikedJobs and returns the data saved in the database.
     * @param {LikedJobCreateManyAndReturnArgs} args - Arguments to create many LikedJobs.
     * @example
     * // Create many LikedJobs
     * const likedJob = await prisma.likedJob.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LikedJobs and only return the `id`
     * const likedJobWithIdOnly = await prisma.likedJob.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LikedJobCreateManyAndReturnArgs>(args?: SelectSubset<T, LikedJobCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikedJobPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a LikedJob.
     * @param {LikedJobDeleteArgs} args - Arguments to delete one LikedJob.
     * @example
     * // Delete one LikedJob
     * const LikedJob = await prisma.likedJob.delete({
     *   where: {
     *     // ... filter to delete one LikedJob
     *   }
     * })
     * 
     */
    delete<T extends LikedJobDeleteArgs>(args: SelectSubset<T, LikedJobDeleteArgs<ExtArgs>>): Prisma__LikedJobClient<$Result.GetResult<Prisma.$LikedJobPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one LikedJob.
     * @param {LikedJobUpdateArgs} args - Arguments to update one LikedJob.
     * @example
     * // Update one LikedJob
     * const likedJob = await prisma.likedJob.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LikedJobUpdateArgs>(args: SelectSubset<T, LikedJobUpdateArgs<ExtArgs>>): Prisma__LikedJobClient<$Result.GetResult<Prisma.$LikedJobPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more LikedJobs.
     * @param {LikedJobDeleteManyArgs} args - Arguments to filter LikedJobs to delete.
     * @example
     * // Delete a few LikedJobs
     * const { count } = await prisma.likedJob.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LikedJobDeleteManyArgs>(args?: SelectSubset<T, LikedJobDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LikedJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikedJobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LikedJobs
     * const likedJob = await prisma.likedJob.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LikedJobUpdateManyArgs>(args: SelectSubset<T, LikedJobUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LikedJob.
     * @param {LikedJobUpsertArgs} args - Arguments to update or create a LikedJob.
     * @example
     * // Update or create a LikedJob
     * const likedJob = await prisma.likedJob.upsert({
     *   create: {
     *     // ... data to create a LikedJob
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LikedJob we want to update
     *   }
     * })
     */
    upsert<T extends LikedJobUpsertArgs>(args: SelectSubset<T, LikedJobUpsertArgs<ExtArgs>>): Prisma__LikedJobClient<$Result.GetResult<Prisma.$LikedJobPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of LikedJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikedJobCountArgs} args - Arguments to filter LikedJobs to count.
     * @example
     * // Count the number of LikedJobs
     * const count = await prisma.likedJob.count({
     *   where: {
     *     // ... the filter for the LikedJobs we want to count
     *   }
     * })
    **/
    count<T extends LikedJobCountArgs>(
      args?: Subset<T, LikedJobCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LikedJobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LikedJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikedJobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LikedJobAggregateArgs>(args: Subset<T, LikedJobAggregateArgs>): Prisma.PrismaPromise<GetLikedJobAggregateType<T>>

    /**
     * Group by LikedJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikedJobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LikedJobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LikedJobGroupByArgs['orderBy'] }
        : { orderBy?: LikedJobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LikedJobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLikedJobGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LikedJob model
   */
  readonly fields: LikedJobFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LikedJob.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LikedJobClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    jobPosting<T extends JobPostingDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobPostingDefaultArgs<ExtArgs>>): Prisma__JobPostingClient<$Result.GetResult<Prisma.$JobPostingPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    applicant<T extends ApplicantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ApplicantDefaultArgs<ExtArgs>>): Prisma__ApplicantClient<$Result.GetResult<Prisma.$ApplicantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LikedJob model
   */ 
  interface LikedJobFieldRefs {
    readonly id: FieldRef<"LikedJob", 'String'>
    readonly createdAt: FieldRef<"LikedJob", 'DateTime'>
    readonly jobId: FieldRef<"LikedJob", 'String'>
    readonly applicantId: FieldRef<"LikedJob", 'String'>
  }
    

  // Custom InputTypes
  /**
   * LikedJob findUnique
   */
  export type LikedJobFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikedJob
     */
    select?: LikedJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikedJobInclude<ExtArgs> | null
    /**
     * Filter, which LikedJob to fetch.
     */
    where: LikedJobWhereUniqueInput
  }

  /**
   * LikedJob findUniqueOrThrow
   */
  export type LikedJobFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikedJob
     */
    select?: LikedJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikedJobInclude<ExtArgs> | null
    /**
     * Filter, which LikedJob to fetch.
     */
    where: LikedJobWhereUniqueInput
  }

  /**
   * LikedJob findFirst
   */
  export type LikedJobFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikedJob
     */
    select?: LikedJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikedJobInclude<ExtArgs> | null
    /**
     * Filter, which LikedJob to fetch.
     */
    where?: LikedJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LikedJobs to fetch.
     */
    orderBy?: LikedJobOrderByWithRelationInput | LikedJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LikedJobs.
     */
    cursor?: LikedJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LikedJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LikedJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LikedJobs.
     */
    distinct?: LikedJobScalarFieldEnum | LikedJobScalarFieldEnum[]
  }

  /**
   * LikedJob findFirstOrThrow
   */
  export type LikedJobFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikedJob
     */
    select?: LikedJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikedJobInclude<ExtArgs> | null
    /**
     * Filter, which LikedJob to fetch.
     */
    where?: LikedJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LikedJobs to fetch.
     */
    orderBy?: LikedJobOrderByWithRelationInput | LikedJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LikedJobs.
     */
    cursor?: LikedJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LikedJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LikedJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LikedJobs.
     */
    distinct?: LikedJobScalarFieldEnum | LikedJobScalarFieldEnum[]
  }

  /**
   * LikedJob findMany
   */
  export type LikedJobFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikedJob
     */
    select?: LikedJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikedJobInclude<ExtArgs> | null
    /**
     * Filter, which LikedJobs to fetch.
     */
    where?: LikedJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LikedJobs to fetch.
     */
    orderBy?: LikedJobOrderByWithRelationInput | LikedJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LikedJobs.
     */
    cursor?: LikedJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LikedJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LikedJobs.
     */
    skip?: number
    distinct?: LikedJobScalarFieldEnum | LikedJobScalarFieldEnum[]
  }

  /**
   * LikedJob create
   */
  export type LikedJobCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikedJob
     */
    select?: LikedJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikedJobInclude<ExtArgs> | null
    /**
     * The data needed to create a LikedJob.
     */
    data: XOR<LikedJobCreateInput, LikedJobUncheckedCreateInput>
  }

  /**
   * LikedJob createMany
   */
  export type LikedJobCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LikedJobs.
     */
    data: LikedJobCreateManyInput | LikedJobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LikedJob createManyAndReturn
   */
  export type LikedJobCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikedJob
     */
    select?: LikedJobSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many LikedJobs.
     */
    data: LikedJobCreateManyInput | LikedJobCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikedJobIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LikedJob update
   */
  export type LikedJobUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikedJob
     */
    select?: LikedJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikedJobInclude<ExtArgs> | null
    /**
     * The data needed to update a LikedJob.
     */
    data: XOR<LikedJobUpdateInput, LikedJobUncheckedUpdateInput>
    /**
     * Choose, which LikedJob to update.
     */
    where: LikedJobWhereUniqueInput
  }

  /**
   * LikedJob updateMany
   */
  export type LikedJobUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LikedJobs.
     */
    data: XOR<LikedJobUpdateManyMutationInput, LikedJobUncheckedUpdateManyInput>
    /**
     * Filter which LikedJobs to update
     */
    where?: LikedJobWhereInput
  }

  /**
   * LikedJob upsert
   */
  export type LikedJobUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikedJob
     */
    select?: LikedJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikedJobInclude<ExtArgs> | null
    /**
     * The filter to search for the LikedJob to update in case it exists.
     */
    where: LikedJobWhereUniqueInput
    /**
     * In case the LikedJob found by the `where` argument doesn't exist, create a new LikedJob with this data.
     */
    create: XOR<LikedJobCreateInput, LikedJobUncheckedCreateInput>
    /**
     * In case the LikedJob was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LikedJobUpdateInput, LikedJobUncheckedUpdateInput>
  }

  /**
   * LikedJob delete
   */
  export type LikedJobDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikedJob
     */
    select?: LikedJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikedJobInclude<ExtArgs> | null
    /**
     * Filter which LikedJob to delete.
     */
    where: LikedJobWhereUniqueInput
  }

  /**
   * LikedJob deleteMany
   */
  export type LikedJobDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LikedJobs to delete
     */
    where?: LikedJobWhereInput
  }

  /**
   * LikedJob without action
   */
  export type LikedJobDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikedJob
     */
    select?: LikedJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikedJobInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    applicantId: 'applicantId',
    employerId: 'employerId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const EmployerScalarFieldEnum: {
    id: 'id',
    name: 'name',
    address: 'address',
    websiteUrl: 'websiteUrl',
    category: 'category',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EmployerScalarFieldEnum = (typeof EmployerScalarFieldEnum)[keyof typeof EmployerScalarFieldEnum]


  export const ApplicantScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    phoneNumber: 'phoneNumber',
    introduction: 'introduction',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ApplicantScalarFieldEnum = (typeof ApplicantScalarFieldEnum)[keyof typeof ApplicantScalarFieldEnum]


  export const DocScalarFieldEnum: {
    id: 'id',
    filename: 'filename',
    fileUrl: 'fileUrl',
    fileType: 'fileType',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    applicantId: 'applicantId'
  };

  export type DocScalarFieldEnum = (typeof DocScalarFieldEnum)[keyof typeof DocScalarFieldEnum]


  export const JobCategoryScalarFieldEnum: {
    id: 'id',
    category: 'category',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type JobCategoryScalarFieldEnum = (typeof JobCategoryScalarFieldEnum)[keyof typeof JobCategoryScalarFieldEnum]


  export const JobPostingScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    hourlySalaryRange: 'hourlySalaryRange',
    expiryDate: 'expiryDate',
    jobName: 'jobName',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    employerId: 'employerId',
    jobCategoryId: 'jobCategoryId'
  };

  export type JobPostingScalarFieldEnum = (typeof JobPostingScalarFieldEnum)[keyof typeof JobPostingScalarFieldEnum]


  export const DiscardedJobScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    jobId: 'jobId',
    applicantId: 'applicantId'
  };

  export type DiscardedJobScalarFieldEnum = (typeof DiscardedJobScalarFieldEnum)[keyof typeof DiscardedJobScalarFieldEnum]


  export const LikedJobScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    jobId: 'jobId',
    applicantId: 'applicantId'
  };

  export type LikedJobScalarFieldEnum = (typeof LikedJobScalarFieldEnum)[keyof typeof LikedJobScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    applicantId?: StringNullableFilter<"User"> | string | null
    employerId?: StringNullableFilter<"User"> | string | null
    applicant?: XOR<ApplicantNullableScalarRelationFilter, ApplicantWhereInput> | null
    employer?: XOR<EmployerNullableScalarRelationFilter, EmployerWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    applicantId?: SortOrderInput | SortOrder
    employerId?: SortOrderInput | SortOrder
    applicant?: ApplicantOrderByWithRelationInput
    employer?: EmployerOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    applicantId?: string
    employerId?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    applicant?: XOR<ApplicantNullableScalarRelationFilter, ApplicantWhereInput> | null
    employer?: XOR<EmployerNullableScalarRelationFilter, EmployerWhereInput> | null
  }, "id" | "email" | "applicantId" | "employerId">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    applicantId?: SortOrderInput | SortOrder
    employerId?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    applicantId?: StringNullableWithAggregatesFilter<"User"> | string | null
    employerId?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type EmployerWhereInput = {
    AND?: EmployerWhereInput | EmployerWhereInput[]
    OR?: EmployerWhereInput[]
    NOT?: EmployerWhereInput | EmployerWhereInput[]
    id?: StringFilter<"Employer"> | string
    name?: StringFilter<"Employer"> | string
    address?: StringFilter<"Employer"> | string
    websiteUrl?: StringNullableFilter<"Employer"> | string | null
    category?: StringFilter<"Employer"> | string
    createdAt?: DateTimeFilter<"Employer"> | Date | string
    updatedAt?: DateTimeFilter<"Employer"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    jobPostings?: JobPostingListRelationFilter
  }

  export type EmployerOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    websiteUrl?: SortOrderInput | SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    jobPostings?: JobPostingOrderByRelationAggregateInput
  }

  export type EmployerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EmployerWhereInput | EmployerWhereInput[]
    OR?: EmployerWhereInput[]
    NOT?: EmployerWhereInput | EmployerWhereInput[]
    name?: StringFilter<"Employer"> | string
    address?: StringFilter<"Employer"> | string
    websiteUrl?: StringNullableFilter<"Employer"> | string | null
    category?: StringFilter<"Employer"> | string
    createdAt?: DateTimeFilter<"Employer"> | Date | string
    updatedAt?: DateTimeFilter<"Employer"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    jobPostings?: JobPostingListRelationFilter
  }, "id">

  export type EmployerOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    websiteUrl?: SortOrderInput | SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EmployerCountOrderByAggregateInput
    _max?: EmployerMaxOrderByAggregateInput
    _min?: EmployerMinOrderByAggregateInput
  }

  export type EmployerScalarWhereWithAggregatesInput = {
    AND?: EmployerScalarWhereWithAggregatesInput | EmployerScalarWhereWithAggregatesInput[]
    OR?: EmployerScalarWhereWithAggregatesInput[]
    NOT?: EmployerScalarWhereWithAggregatesInput | EmployerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Employer"> | string
    name?: StringWithAggregatesFilter<"Employer"> | string
    address?: StringWithAggregatesFilter<"Employer"> | string
    websiteUrl?: StringNullableWithAggregatesFilter<"Employer"> | string | null
    category?: StringWithAggregatesFilter<"Employer"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Employer"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Employer"> | Date | string
  }

  export type ApplicantWhereInput = {
    AND?: ApplicantWhereInput | ApplicantWhereInput[]
    OR?: ApplicantWhereInput[]
    NOT?: ApplicantWhereInput | ApplicantWhereInput[]
    id?: StringFilter<"Applicant"> | string
    firstName?: StringFilter<"Applicant"> | string
    lastName?: StringFilter<"Applicant"> | string
    phoneNumber?: StringNullableFilter<"Applicant"> | string | null
    introduction?: StringNullableFilter<"Applicant"> | string | null
    createdAt?: DateTimeFilter<"Applicant"> | Date | string
    updatedAt?: DateTimeFilter<"Applicant"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    docs?: DocListRelationFilter
    discardedJobs?: DiscardedJobListRelationFilter
    likedJobs?: LikedJobListRelationFilter
  }

  export type ApplicantOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    introduction?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    docs?: DocOrderByRelationAggregateInput
    discardedJobs?: DiscardedJobOrderByRelationAggregateInput
    likedJobs?: LikedJobOrderByRelationAggregateInput
  }

  export type ApplicantWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ApplicantWhereInput | ApplicantWhereInput[]
    OR?: ApplicantWhereInput[]
    NOT?: ApplicantWhereInput | ApplicantWhereInput[]
    firstName?: StringFilter<"Applicant"> | string
    lastName?: StringFilter<"Applicant"> | string
    phoneNumber?: StringNullableFilter<"Applicant"> | string | null
    introduction?: StringNullableFilter<"Applicant"> | string | null
    createdAt?: DateTimeFilter<"Applicant"> | Date | string
    updatedAt?: DateTimeFilter<"Applicant"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    docs?: DocListRelationFilter
    discardedJobs?: DiscardedJobListRelationFilter
    likedJobs?: LikedJobListRelationFilter
  }, "id">

  export type ApplicantOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    introduction?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ApplicantCountOrderByAggregateInput
    _max?: ApplicantMaxOrderByAggregateInput
    _min?: ApplicantMinOrderByAggregateInput
  }

  export type ApplicantScalarWhereWithAggregatesInput = {
    AND?: ApplicantScalarWhereWithAggregatesInput | ApplicantScalarWhereWithAggregatesInput[]
    OR?: ApplicantScalarWhereWithAggregatesInput[]
    NOT?: ApplicantScalarWhereWithAggregatesInput | ApplicantScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Applicant"> | string
    firstName?: StringWithAggregatesFilter<"Applicant"> | string
    lastName?: StringWithAggregatesFilter<"Applicant"> | string
    phoneNumber?: StringNullableWithAggregatesFilter<"Applicant"> | string | null
    introduction?: StringNullableWithAggregatesFilter<"Applicant"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Applicant"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Applicant"> | Date | string
  }

  export type DocWhereInput = {
    AND?: DocWhereInput | DocWhereInput[]
    OR?: DocWhereInput[]
    NOT?: DocWhereInput | DocWhereInput[]
    id?: StringFilter<"Doc"> | string
    filename?: StringFilter<"Doc"> | string
    fileUrl?: StringFilter<"Doc"> | string
    fileType?: StringFilter<"Doc"> | string
    createdAt?: DateTimeFilter<"Doc"> | Date | string
    updatedAt?: DateTimeFilter<"Doc"> | Date | string
    applicantId?: StringFilter<"Doc"> | string
    applicant?: XOR<ApplicantScalarRelationFilter, ApplicantWhereInput>
  }

  export type DocOrderByWithRelationInput = {
    id?: SortOrder
    filename?: SortOrder
    fileUrl?: SortOrder
    fileType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    applicantId?: SortOrder
    applicant?: ApplicantOrderByWithRelationInput
  }

  export type DocWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DocWhereInput | DocWhereInput[]
    OR?: DocWhereInput[]
    NOT?: DocWhereInput | DocWhereInput[]
    filename?: StringFilter<"Doc"> | string
    fileUrl?: StringFilter<"Doc"> | string
    fileType?: StringFilter<"Doc"> | string
    createdAt?: DateTimeFilter<"Doc"> | Date | string
    updatedAt?: DateTimeFilter<"Doc"> | Date | string
    applicantId?: StringFilter<"Doc"> | string
    applicant?: XOR<ApplicantScalarRelationFilter, ApplicantWhereInput>
  }, "id">

  export type DocOrderByWithAggregationInput = {
    id?: SortOrder
    filename?: SortOrder
    fileUrl?: SortOrder
    fileType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    applicantId?: SortOrder
    _count?: DocCountOrderByAggregateInput
    _max?: DocMaxOrderByAggregateInput
    _min?: DocMinOrderByAggregateInput
  }

  export type DocScalarWhereWithAggregatesInput = {
    AND?: DocScalarWhereWithAggregatesInput | DocScalarWhereWithAggregatesInput[]
    OR?: DocScalarWhereWithAggregatesInput[]
    NOT?: DocScalarWhereWithAggregatesInput | DocScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Doc"> | string
    filename?: StringWithAggregatesFilter<"Doc"> | string
    fileUrl?: StringWithAggregatesFilter<"Doc"> | string
    fileType?: StringWithAggregatesFilter<"Doc"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Doc"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Doc"> | Date | string
    applicantId?: StringWithAggregatesFilter<"Doc"> | string
  }

  export type JobCategoryWhereInput = {
    AND?: JobCategoryWhereInput | JobCategoryWhereInput[]
    OR?: JobCategoryWhereInput[]
    NOT?: JobCategoryWhereInput | JobCategoryWhereInput[]
    id?: StringFilter<"JobCategory"> | string
    category?: StringFilter<"JobCategory"> | string
    name?: StringFilter<"JobCategory"> | string
    createdAt?: DateTimeFilter<"JobCategory"> | Date | string
    updatedAt?: DateTimeFilter<"JobCategory"> | Date | string
    jobPostings?: JobPostingListRelationFilter
  }

  export type JobCategoryOrderByWithRelationInput = {
    id?: SortOrder
    category?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    jobPostings?: JobPostingOrderByRelationAggregateInput
  }

  export type JobCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    category?: string
    AND?: JobCategoryWhereInput | JobCategoryWhereInput[]
    OR?: JobCategoryWhereInput[]
    NOT?: JobCategoryWhereInput | JobCategoryWhereInput[]
    name?: StringFilter<"JobCategory"> | string
    createdAt?: DateTimeFilter<"JobCategory"> | Date | string
    updatedAt?: DateTimeFilter<"JobCategory"> | Date | string
    jobPostings?: JobPostingListRelationFilter
  }, "id" | "category">

  export type JobCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    category?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: JobCategoryCountOrderByAggregateInput
    _max?: JobCategoryMaxOrderByAggregateInput
    _min?: JobCategoryMinOrderByAggregateInput
  }

  export type JobCategoryScalarWhereWithAggregatesInput = {
    AND?: JobCategoryScalarWhereWithAggregatesInput | JobCategoryScalarWhereWithAggregatesInput[]
    OR?: JobCategoryScalarWhereWithAggregatesInput[]
    NOT?: JobCategoryScalarWhereWithAggregatesInput | JobCategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"JobCategory"> | string
    category?: StringWithAggregatesFilter<"JobCategory"> | string
    name?: StringWithAggregatesFilter<"JobCategory"> | string
    createdAt?: DateTimeWithAggregatesFilter<"JobCategory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"JobCategory"> | Date | string
  }

  export type JobPostingWhereInput = {
    AND?: JobPostingWhereInput | JobPostingWhereInput[]
    OR?: JobPostingWhereInput[]
    NOT?: JobPostingWhereInput | JobPostingWhereInput[]
    id?: StringFilter<"JobPosting"> | string
    title?: StringFilter<"JobPosting"> | string
    description?: StringFilter<"JobPosting"> | string
    hourlySalaryRange?: StringFilter<"JobPosting"> | string
    expiryDate?: DateTimeFilter<"JobPosting"> | Date | string
    jobName?: StringFilter<"JobPosting"> | string
    createdAt?: DateTimeFilter<"JobPosting"> | Date | string
    updatedAt?: DateTimeFilter<"JobPosting"> | Date | string
    employerId?: StringFilter<"JobPosting"> | string
    jobCategoryId?: StringFilter<"JobPosting"> | string
    employer?: XOR<EmployerScalarRelationFilter, EmployerWhereInput>
    jobCategory?: XOR<JobCategoryScalarRelationFilter, JobCategoryWhereInput>
    discardedJobs?: DiscardedJobListRelationFilter
    likedJobs?: LikedJobListRelationFilter
  }

  export type JobPostingOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    hourlySalaryRange?: SortOrder
    expiryDate?: SortOrder
    jobName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    employerId?: SortOrder
    jobCategoryId?: SortOrder
    employer?: EmployerOrderByWithRelationInput
    jobCategory?: JobCategoryOrderByWithRelationInput
    discardedJobs?: DiscardedJobOrderByRelationAggregateInput
    likedJobs?: LikedJobOrderByRelationAggregateInput
  }

  export type JobPostingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: JobPostingWhereInput | JobPostingWhereInput[]
    OR?: JobPostingWhereInput[]
    NOT?: JobPostingWhereInput | JobPostingWhereInput[]
    title?: StringFilter<"JobPosting"> | string
    description?: StringFilter<"JobPosting"> | string
    hourlySalaryRange?: StringFilter<"JobPosting"> | string
    expiryDate?: DateTimeFilter<"JobPosting"> | Date | string
    jobName?: StringFilter<"JobPosting"> | string
    createdAt?: DateTimeFilter<"JobPosting"> | Date | string
    updatedAt?: DateTimeFilter<"JobPosting"> | Date | string
    employerId?: StringFilter<"JobPosting"> | string
    jobCategoryId?: StringFilter<"JobPosting"> | string
    employer?: XOR<EmployerScalarRelationFilter, EmployerWhereInput>
    jobCategory?: XOR<JobCategoryScalarRelationFilter, JobCategoryWhereInput>
    discardedJobs?: DiscardedJobListRelationFilter
    likedJobs?: LikedJobListRelationFilter
  }, "id">

  export type JobPostingOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    hourlySalaryRange?: SortOrder
    expiryDate?: SortOrder
    jobName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    employerId?: SortOrder
    jobCategoryId?: SortOrder
    _count?: JobPostingCountOrderByAggregateInput
    _max?: JobPostingMaxOrderByAggregateInput
    _min?: JobPostingMinOrderByAggregateInput
  }

  export type JobPostingScalarWhereWithAggregatesInput = {
    AND?: JobPostingScalarWhereWithAggregatesInput | JobPostingScalarWhereWithAggregatesInput[]
    OR?: JobPostingScalarWhereWithAggregatesInput[]
    NOT?: JobPostingScalarWhereWithAggregatesInput | JobPostingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"JobPosting"> | string
    title?: StringWithAggregatesFilter<"JobPosting"> | string
    description?: StringWithAggregatesFilter<"JobPosting"> | string
    hourlySalaryRange?: StringWithAggregatesFilter<"JobPosting"> | string
    expiryDate?: DateTimeWithAggregatesFilter<"JobPosting"> | Date | string
    jobName?: StringWithAggregatesFilter<"JobPosting"> | string
    createdAt?: DateTimeWithAggregatesFilter<"JobPosting"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"JobPosting"> | Date | string
    employerId?: StringWithAggregatesFilter<"JobPosting"> | string
    jobCategoryId?: StringWithAggregatesFilter<"JobPosting"> | string
  }

  export type DiscardedJobWhereInput = {
    AND?: DiscardedJobWhereInput | DiscardedJobWhereInput[]
    OR?: DiscardedJobWhereInput[]
    NOT?: DiscardedJobWhereInput | DiscardedJobWhereInput[]
    id?: StringFilter<"DiscardedJob"> | string
    createdAt?: DateTimeFilter<"DiscardedJob"> | Date | string
    jobId?: StringFilter<"DiscardedJob"> | string
    applicantId?: StringFilter<"DiscardedJob"> | string
    jobPosting?: XOR<JobPostingScalarRelationFilter, JobPostingWhereInput>
    applicant?: XOR<ApplicantScalarRelationFilter, ApplicantWhereInput>
  }

  export type DiscardedJobOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    jobId?: SortOrder
    applicantId?: SortOrder
    jobPosting?: JobPostingOrderByWithRelationInput
    applicant?: ApplicantOrderByWithRelationInput
  }

  export type DiscardedJobWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    jobId_applicantId?: DiscardedJobJobIdApplicantIdCompoundUniqueInput
    AND?: DiscardedJobWhereInput | DiscardedJobWhereInput[]
    OR?: DiscardedJobWhereInput[]
    NOT?: DiscardedJobWhereInput | DiscardedJobWhereInput[]
    createdAt?: DateTimeFilter<"DiscardedJob"> | Date | string
    jobId?: StringFilter<"DiscardedJob"> | string
    applicantId?: StringFilter<"DiscardedJob"> | string
    jobPosting?: XOR<JobPostingScalarRelationFilter, JobPostingWhereInput>
    applicant?: XOR<ApplicantScalarRelationFilter, ApplicantWhereInput>
  }, "id" | "jobId_applicantId">

  export type DiscardedJobOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    jobId?: SortOrder
    applicantId?: SortOrder
    _count?: DiscardedJobCountOrderByAggregateInput
    _max?: DiscardedJobMaxOrderByAggregateInput
    _min?: DiscardedJobMinOrderByAggregateInput
  }

  export type DiscardedJobScalarWhereWithAggregatesInput = {
    AND?: DiscardedJobScalarWhereWithAggregatesInput | DiscardedJobScalarWhereWithAggregatesInput[]
    OR?: DiscardedJobScalarWhereWithAggregatesInput[]
    NOT?: DiscardedJobScalarWhereWithAggregatesInput | DiscardedJobScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DiscardedJob"> | string
    createdAt?: DateTimeWithAggregatesFilter<"DiscardedJob"> | Date | string
    jobId?: StringWithAggregatesFilter<"DiscardedJob"> | string
    applicantId?: StringWithAggregatesFilter<"DiscardedJob"> | string
  }

  export type LikedJobWhereInput = {
    AND?: LikedJobWhereInput | LikedJobWhereInput[]
    OR?: LikedJobWhereInput[]
    NOT?: LikedJobWhereInput | LikedJobWhereInput[]
    id?: StringFilter<"LikedJob"> | string
    createdAt?: DateTimeFilter<"LikedJob"> | Date | string
    jobId?: StringFilter<"LikedJob"> | string
    applicantId?: StringFilter<"LikedJob"> | string
    jobPosting?: XOR<JobPostingScalarRelationFilter, JobPostingWhereInput>
    applicant?: XOR<ApplicantScalarRelationFilter, ApplicantWhereInput>
  }

  export type LikedJobOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    jobId?: SortOrder
    applicantId?: SortOrder
    jobPosting?: JobPostingOrderByWithRelationInput
    applicant?: ApplicantOrderByWithRelationInput
  }

  export type LikedJobWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    jobId_applicantId?: LikedJobJobIdApplicantIdCompoundUniqueInput
    AND?: LikedJobWhereInput | LikedJobWhereInput[]
    OR?: LikedJobWhereInput[]
    NOT?: LikedJobWhereInput | LikedJobWhereInput[]
    createdAt?: DateTimeFilter<"LikedJob"> | Date | string
    jobId?: StringFilter<"LikedJob"> | string
    applicantId?: StringFilter<"LikedJob"> | string
    jobPosting?: XOR<JobPostingScalarRelationFilter, JobPostingWhereInput>
    applicant?: XOR<ApplicantScalarRelationFilter, ApplicantWhereInput>
  }, "id" | "jobId_applicantId">

  export type LikedJobOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    jobId?: SortOrder
    applicantId?: SortOrder
    _count?: LikedJobCountOrderByAggregateInput
    _max?: LikedJobMaxOrderByAggregateInput
    _min?: LikedJobMinOrderByAggregateInput
  }

  export type LikedJobScalarWhereWithAggregatesInput = {
    AND?: LikedJobScalarWhereWithAggregatesInput | LikedJobScalarWhereWithAggregatesInput[]
    OR?: LikedJobScalarWhereWithAggregatesInput[]
    NOT?: LikedJobScalarWhereWithAggregatesInput | LikedJobScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LikedJob"> | string
    createdAt?: DateTimeWithAggregatesFilter<"LikedJob"> | Date | string
    jobId?: StringWithAggregatesFilter<"LikedJob"> | string
    applicantId?: StringWithAggregatesFilter<"LikedJob"> | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    applicant?: ApplicantCreateNestedOneWithoutUserInput
    employer?: EmployerCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    applicantId?: string | null
    employerId?: string | null
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicant?: ApplicantUpdateOneWithoutUserNestedInput
    employer?: EmployerUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicantId?: NullableStringFieldUpdateOperationsInput | string | null
    employerId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    applicantId?: string | null
    employerId?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicantId?: NullableStringFieldUpdateOperationsInput | string | null
    employerId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EmployerCreateInput = {
    id?: string
    name: string
    address: string
    websiteUrl?: string | null
    category: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutEmployerInput
    jobPostings?: JobPostingCreateNestedManyWithoutEmployerInput
  }

  export type EmployerUncheckedCreateInput = {
    id?: string
    name: string
    address: string
    websiteUrl?: string | null
    category: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserUncheckedCreateNestedOneWithoutEmployerInput
    jobPostings?: JobPostingUncheckedCreateNestedManyWithoutEmployerInput
  }

  export type EmployerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutEmployerNestedInput
    jobPostings?: JobPostingUpdateManyWithoutEmployerNestedInput
  }

  export type EmployerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUncheckedUpdateOneWithoutEmployerNestedInput
    jobPostings?: JobPostingUncheckedUpdateManyWithoutEmployerNestedInput
  }

  export type EmployerCreateManyInput = {
    id?: string
    name: string
    address: string
    websiteUrl?: string | null
    category: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmployerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicantCreateInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber?: string | null
    introduction?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutApplicantInput
    docs?: DocCreateNestedManyWithoutApplicantInput
    discardedJobs?: DiscardedJobCreateNestedManyWithoutApplicantInput
    likedJobs?: LikedJobCreateNestedManyWithoutApplicantInput
  }

  export type ApplicantUncheckedCreateInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber?: string | null
    introduction?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserUncheckedCreateNestedOneWithoutApplicantInput
    docs?: DocUncheckedCreateNestedManyWithoutApplicantInput
    discardedJobs?: DiscardedJobUncheckedCreateNestedManyWithoutApplicantInput
    likedJobs?: LikedJobUncheckedCreateNestedManyWithoutApplicantInput
  }

  export type ApplicantUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    introduction?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutApplicantNestedInput
    docs?: DocUpdateManyWithoutApplicantNestedInput
    discardedJobs?: DiscardedJobUpdateManyWithoutApplicantNestedInput
    likedJobs?: LikedJobUpdateManyWithoutApplicantNestedInput
  }

  export type ApplicantUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    introduction?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUncheckedUpdateOneWithoutApplicantNestedInput
    docs?: DocUncheckedUpdateManyWithoutApplicantNestedInput
    discardedJobs?: DiscardedJobUncheckedUpdateManyWithoutApplicantNestedInput
    likedJobs?: LikedJobUncheckedUpdateManyWithoutApplicantNestedInput
  }

  export type ApplicantCreateManyInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber?: string | null
    introduction?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ApplicantUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    introduction?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicantUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    introduction?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocCreateInput = {
    id?: string
    filename: string
    fileUrl: string
    fileType: string
    createdAt?: Date | string
    updatedAt?: Date | string
    applicant: ApplicantCreateNestedOneWithoutDocsInput
  }

  export type DocUncheckedCreateInput = {
    id?: string
    filename: string
    fileUrl: string
    fileType: string
    createdAt?: Date | string
    updatedAt?: Date | string
    applicantId: string
  }

  export type DocUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicant?: ApplicantUpdateOneRequiredWithoutDocsNestedInput
  }

  export type DocUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicantId?: StringFieldUpdateOperationsInput | string
  }

  export type DocCreateManyInput = {
    id?: string
    filename: string
    fileUrl: string
    fileType: string
    createdAt?: Date | string
    updatedAt?: Date | string
    applicantId: string
  }

  export type DocUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicantId?: StringFieldUpdateOperationsInput | string
  }

  export type JobCategoryCreateInput = {
    id?: string
    category: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    jobPostings?: JobPostingCreateNestedManyWithoutJobCategoryInput
  }

  export type JobCategoryUncheckedCreateInput = {
    id?: string
    category: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    jobPostings?: JobPostingUncheckedCreateNestedManyWithoutJobCategoryInput
  }

  export type JobCategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobPostings?: JobPostingUpdateManyWithoutJobCategoryNestedInput
  }

  export type JobCategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobPostings?: JobPostingUncheckedUpdateManyWithoutJobCategoryNestedInput
  }

  export type JobCategoryCreateManyInput = {
    id?: string
    category: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobCategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobCategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobPostingCreateInput = {
    id?: string
    title: string
    description: string
    hourlySalaryRange: string
    expiryDate: Date | string
    jobName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    employer: EmployerCreateNestedOneWithoutJobPostingsInput
    jobCategory: JobCategoryCreateNestedOneWithoutJobPostingsInput
    discardedJobs?: DiscardedJobCreateNestedManyWithoutJobPostingInput
    likedJobs?: LikedJobCreateNestedManyWithoutJobPostingInput
  }

  export type JobPostingUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    hourlySalaryRange: string
    expiryDate: Date | string
    jobName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    employerId: string
    jobCategoryId: string
    discardedJobs?: DiscardedJobUncheckedCreateNestedManyWithoutJobPostingInput
    likedJobs?: LikedJobUncheckedCreateNestedManyWithoutJobPostingInput
  }

  export type JobPostingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    hourlySalaryRange?: StringFieldUpdateOperationsInput | string
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    jobName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employer?: EmployerUpdateOneRequiredWithoutJobPostingsNestedInput
    jobCategory?: JobCategoryUpdateOneRequiredWithoutJobPostingsNestedInput
    discardedJobs?: DiscardedJobUpdateManyWithoutJobPostingNestedInput
    likedJobs?: LikedJobUpdateManyWithoutJobPostingNestedInput
  }

  export type JobPostingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    hourlySalaryRange?: StringFieldUpdateOperationsInput | string
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    jobName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employerId?: StringFieldUpdateOperationsInput | string
    jobCategoryId?: StringFieldUpdateOperationsInput | string
    discardedJobs?: DiscardedJobUncheckedUpdateManyWithoutJobPostingNestedInput
    likedJobs?: LikedJobUncheckedUpdateManyWithoutJobPostingNestedInput
  }

  export type JobPostingCreateManyInput = {
    id?: string
    title: string
    description: string
    hourlySalaryRange: string
    expiryDate: Date | string
    jobName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    employerId: string
    jobCategoryId: string
  }

  export type JobPostingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    hourlySalaryRange?: StringFieldUpdateOperationsInput | string
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    jobName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobPostingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    hourlySalaryRange?: StringFieldUpdateOperationsInput | string
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    jobName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employerId?: StringFieldUpdateOperationsInput | string
    jobCategoryId?: StringFieldUpdateOperationsInput | string
  }

  export type DiscardedJobCreateInput = {
    id?: string
    createdAt?: Date | string
    jobPosting: JobPostingCreateNestedOneWithoutDiscardedJobsInput
    applicant: ApplicantCreateNestedOneWithoutDiscardedJobsInput
  }

  export type DiscardedJobUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    jobId: string
    applicantId: string
  }

  export type DiscardedJobUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobPosting?: JobPostingUpdateOneRequiredWithoutDiscardedJobsNestedInput
    applicant?: ApplicantUpdateOneRequiredWithoutDiscardedJobsNestedInput
  }

  export type DiscardedJobUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobId?: StringFieldUpdateOperationsInput | string
    applicantId?: StringFieldUpdateOperationsInput | string
  }

  export type DiscardedJobCreateManyInput = {
    id?: string
    createdAt?: Date | string
    jobId: string
    applicantId: string
  }

  export type DiscardedJobUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiscardedJobUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobId?: StringFieldUpdateOperationsInput | string
    applicantId?: StringFieldUpdateOperationsInput | string
  }

  export type LikedJobCreateInput = {
    id?: string
    createdAt?: Date | string
    jobPosting: JobPostingCreateNestedOneWithoutLikedJobsInput
    applicant: ApplicantCreateNestedOneWithoutLikedJobsInput
  }

  export type LikedJobUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    jobId: string
    applicantId: string
  }

  export type LikedJobUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobPosting?: JobPostingUpdateOneRequiredWithoutLikedJobsNestedInput
    applicant?: ApplicantUpdateOneRequiredWithoutLikedJobsNestedInput
  }

  export type LikedJobUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobId?: StringFieldUpdateOperationsInput | string
    applicantId?: StringFieldUpdateOperationsInput | string
  }

  export type LikedJobCreateManyInput = {
    id?: string
    createdAt?: Date | string
    jobId: string
    applicantId: string
  }

  export type LikedJobUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikedJobUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobId?: StringFieldUpdateOperationsInput | string
    applicantId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type ApplicantNullableScalarRelationFilter = {
    is?: ApplicantWhereInput | null
    isNot?: ApplicantWhereInput | null
  }

  export type EmployerNullableScalarRelationFilter = {
    is?: EmployerWhereInput | null
    isNot?: EmployerWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    applicantId?: SortOrder
    employerId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    applicantId?: SortOrder
    employerId?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    applicantId?: SortOrder
    employerId?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type JobPostingListRelationFilter = {
    every?: JobPostingWhereInput
    some?: JobPostingWhereInput
    none?: JobPostingWhereInput
  }

  export type JobPostingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmployerCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    websiteUrl?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmployerMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    websiteUrl?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmployerMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    websiteUrl?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DocListRelationFilter = {
    every?: DocWhereInput
    some?: DocWhereInput
    none?: DocWhereInput
  }

  export type DiscardedJobListRelationFilter = {
    every?: DiscardedJobWhereInput
    some?: DiscardedJobWhereInput
    none?: DiscardedJobWhereInput
  }

  export type LikedJobListRelationFilter = {
    every?: LikedJobWhereInput
    some?: LikedJobWhereInput
    none?: LikedJobWhereInput
  }

  export type DocOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DiscardedJobOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LikedJobOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ApplicantCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phoneNumber?: SortOrder
    introduction?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ApplicantMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phoneNumber?: SortOrder
    introduction?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ApplicantMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phoneNumber?: SortOrder
    introduction?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ApplicantScalarRelationFilter = {
    is?: ApplicantWhereInput
    isNot?: ApplicantWhereInput
  }

  export type DocCountOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    fileUrl?: SortOrder
    fileType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    applicantId?: SortOrder
  }

  export type DocMaxOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    fileUrl?: SortOrder
    fileType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    applicantId?: SortOrder
  }

  export type DocMinOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    fileUrl?: SortOrder
    fileType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    applicantId?: SortOrder
  }

  export type JobCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    category?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    category?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    category?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmployerScalarRelationFilter = {
    is?: EmployerWhereInput
    isNot?: EmployerWhereInput
  }

  export type JobCategoryScalarRelationFilter = {
    is?: JobCategoryWhereInput
    isNot?: JobCategoryWhereInput
  }

  export type JobPostingCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    hourlySalaryRange?: SortOrder
    expiryDate?: SortOrder
    jobName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    employerId?: SortOrder
    jobCategoryId?: SortOrder
  }

  export type JobPostingMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    hourlySalaryRange?: SortOrder
    expiryDate?: SortOrder
    jobName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    employerId?: SortOrder
    jobCategoryId?: SortOrder
  }

  export type JobPostingMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    hourlySalaryRange?: SortOrder
    expiryDate?: SortOrder
    jobName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    employerId?: SortOrder
    jobCategoryId?: SortOrder
  }

  export type JobPostingScalarRelationFilter = {
    is?: JobPostingWhereInput
    isNot?: JobPostingWhereInput
  }

  export type DiscardedJobJobIdApplicantIdCompoundUniqueInput = {
    jobId: string
    applicantId: string
  }

  export type DiscardedJobCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    jobId?: SortOrder
    applicantId?: SortOrder
  }

  export type DiscardedJobMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    jobId?: SortOrder
    applicantId?: SortOrder
  }

  export type DiscardedJobMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    jobId?: SortOrder
    applicantId?: SortOrder
  }

  export type LikedJobJobIdApplicantIdCompoundUniqueInput = {
    jobId: string
    applicantId: string
  }

  export type LikedJobCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    jobId?: SortOrder
    applicantId?: SortOrder
  }

  export type LikedJobMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    jobId?: SortOrder
    applicantId?: SortOrder
  }

  export type LikedJobMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    jobId?: SortOrder
    applicantId?: SortOrder
  }

  export type ApplicantCreateNestedOneWithoutUserInput = {
    create?: XOR<ApplicantCreateWithoutUserInput, ApplicantUncheckedCreateWithoutUserInput>
    connectOrCreate?: ApplicantCreateOrConnectWithoutUserInput
    connect?: ApplicantWhereUniqueInput
  }

  export type EmployerCreateNestedOneWithoutUserInput = {
    create?: XOR<EmployerCreateWithoutUserInput, EmployerUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmployerCreateOrConnectWithoutUserInput
    connect?: EmployerWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ApplicantUpdateOneWithoutUserNestedInput = {
    create?: XOR<ApplicantCreateWithoutUserInput, ApplicantUncheckedCreateWithoutUserInput>
    connectOrCreate?: ApplicantCreateOrConnectWithoutUserInput
    upsert?: ApplicantUpsertWithoutUserInput
    disconnect?: ApplicantWhereInput | boolean
    delete?: ApplicantWhereInput | boolean
    connect?: ApplicantWhereUniqueInput
    update?: XOR<XOR<ApplicantUpdateToOneWithWhereWithoutUserInput, ApplicantUpdateWithoutUserInput>, ApplicantUncheckedUpdateWithoutUserInput>
  }

  export type EmployerUpdateOneWithoutUserNestedInput = {
    create?: XOR<EmployerCreateWithoutUserInput, EmployerUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmployerCreateOrConnectWithoutUserInput
    upsert?: EmployerUpsertWithoutUserInput
    disconnect?: EmployerWhereInput | boolean
    delete?: EmployerWhereInput | boolean
    connect?: EmployerWhereUniqueInput
    update?: XOR<XOR<EmployerUpdateToOneWithWhereWithoutUserInput, EmployerUpdateWithoutUserInput>, EmployerUncheckedUpdateWithoutUserInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserCreateNestedOneWithoutEmployerInput = {
    create?: XOR<UserCreateWithoutEmployerInput, UserUncheckedCreateWithoutEmployerInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmployerInput
    connect?: UserWhereUniqueInput
  }

  export type JobPostingCreateNestedManyWithoutEmployerInput = {
    create?: XOR<JobPostingCreateWithoutEmployerInput, JobPostingUncheckedCreateWithoutEmployerInput> | JobPostingCreateWithoutEmployerInput[] | JobPostingUncheckedCreateWithoutEmployerInput[]
    connectOrCreate?: JobPostingCreateOrConnectWithoutEmployerInput | JobPostingCreateOrConnectWithoutEmployerInput[]
    createMany?: JobPostingCreateManyEmployerInputEnvelope
    connect?: JobPostingWhereUniqueInput | JobPostingWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedOneWithoutEmployerInput = {
    create?: XOR<UserCreateWithoutEmployerInput, UserUncheckedCreateWithoutEmployerInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmployerInput
    connect?: UserWhereUniqueInput
  }

  export type JobPostingUncheckedCreateNestedManyWithoutEmployerInput = {
    create?: XOR<JobPostingCreateWithoutEmployerInput, JobPostingUncheckedCreateWithoutEmployerInput> | JobPostingCreateWithoutEmployerInput[] | JobPostingUncheckedCreateWithoutEmployerInput[]
    connectOrCreate?: JobPostingCreateOrConnectWithoutEmployerInput | JobPostingCreateOrConnectWithoutEmployerInput[]
    createMany?: JobPostingCreateManyEmployerInputEnvelope
    connect?: JobPostingWhereUniqueInput | JobPostingWhereUniqueInput[]
  }

  export type UserUpdateOneWithoutEmployerNestedInput = {
    create?: XOR<UserCreateWithoutEmployerInput, UserUncheckedCreateWithoutEmployerInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmployerInput
    upsert?: UserUpsertWithoutEmployerInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEmployerInput, UserUpdateWithoutEmployerInput>, UserUncheckedUpdateWithoutEmployerInput>
  }

  export type JobPostingUpdateManyWithoutEmployerNestedInput = {
    create?: XOR<JobPostingCreateWithoutEmployerInput, JobPostingUncheckedCreateWithoutEmployerInput> | JobPostingCreateWithoutEmployerInput[] | JobPostingUncheckedCreateWithoutEmployerInput[]
    connectOrCreate?: JobPostingCreateOrConnectWithoutEmployerInput | JobPostingCreateOrConnectWithoutEmployerInput[]
    upsert?: JobPostingUpsertWithWhereUniqueWithoutEmployerInput | JobPostingUpsertWithWhereUniqueWithoutEmployerInput[]
    createMany?: JobPostingCreateManyEmployerInputEnvelope
    set?: JobPostingWhereUniqueInput | JobPostingWhereUniqueInput[]
    disconnect?: JobPostingWhereUniqueInput | JobPostingWhereUniqueInput[]
    delete?: JobPostingWhereUniqueInput | JobPostingWhereUniqueInput[]
    connect?: JobPostingWhereUniqueInput | JobPostingWhereUniqueInput[]
    update?: JobPostingUpdateWithWhereUniqueWithoutEmployerInput | JobPostingUpdateWithWhereUniqueWithoutEmployerInput[]
    updateMany?: JobPostingUpdateManyWithWhereWithoutEmployerInput | JobPostingUpdateManyWithWhereWithoutEmployerInput[]
    deleteMany?: JobPostingScalarWhereInput | JobPostingScalarWhereInput[]
  }

  export type UserUncheckedUpdateOneWithoutEmployerNestedInput = {
    create?: XOR<UserCreateWithoutEmployerInput, UserUncheckedCreateWithoutEmployerInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmployerInput
    upsert?: UserUpsertWithoutEmployerInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEmployerInput, UserUpdateWithoutEmployerInput>, UserUncheckedUpdateWithoutEmployerInput>
  }

  export type JobPostingUncheckedUpdateManyWithoutEmployerNestedInput = {
    create?: XOR<JobPostingCreateWithoutEmployerInput, JobPostingUncheckedCreateWithoutEmployerInput> | JobPostingCreateWithoutEmployerInput[] | JobPostingUncheckedCreateWithoutEmployerInput[]
    connectOrCreate?: JobPostingCreateOrConnectWithoutEmployerInput | JobPostingCreateOrConnectWithoutEmployerInput[]
    upsert?: JobPostingUpsertWithWhereUniqueWithoutEmployerInput | JobPostingUpsertWithWhereUniqueWithoutEmployerInput[]
    createMany?: JobPostingCreateManyEmployerInputEnvelope
    set?: JobPostingWhereUniqueInput | JobPostingWhereUniqueInput[]
    disconnect?: JobPostingWhereUniqueInput | JobPostingWhereUniqueInput[]
    delete?: JobPostingWhereUniqueInput | JobPostingWhereUniqueInput[]
    connect?: JobPostingWhereUniqueInput | JobPostingWhereUniqueInput[]
    update?: JobPostingUpdateWithWhereUniqueWithoutEmployerInput | JobPostingUpdateWithWhereUniqueWithoutEmployerInput[]
    updateMany?: JobPostingUpdateManyWithWhereWithoutEmployerInput | JobPostingUpdateManyWithWhereWithoutEmployerInput[]
    deleteMany?: JobPostingScalarWhereInput | JobPostingScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutApplicantInput = {
    create?: XOR<UserCreateWithoutApplicantInput, UserUncheckedCreateWithoutApplicantInput>
    connectOrCreate?: UserCreateOrConnectWithoutApplicantInput
    connect?: UserWhereUniqueInput
  }

  export type DocCreateNestedManyWithoutApplicantInput = {
    create?: XOR<DocCreateWithoutApplicantInput, DocUncheckedCreateWithoutApplicantInput> | DocCreateWithoutApplicantInput[] | DocUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: DocCreateOrConnectWithoutApplicantInput | DocCreateOrConnectWithoutApplicantInput[]
    createMany?: DocCreateManyApplicantInputEnvelope
    connect?: DocWhereUniqueInput | DocWhereUniqueInput[]
  }

  export type DiscardedJobCreateNestedManyWithoutApplicantInput = {
    create?: XOR<DiscardedJobCreateWithoutApplicantInput, DiscardedJobUncheckedCreateWithoutApplicantInput> | DiscardedJobCreateWithoutApplicantInput[] | DiscardedJobUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: DiscardedJobCreateOrConnectWithoutApplicantInput | DiscardedJobCreateOrConnectWithoutApplicantInput[]
    createMany?: DiscardedJobCreateManyApplicantInputEnvelope
    connect?: DiscardedJobWhereUniqueInput | DiscardedJobWhereUniqueInput[]
  }

  export type LikedJobCreateNestedManyWithoutApplicantInput = {
    create?: XOR<LikedJobCreateWithoutApplicantInput, LikedJobUncheckedCreateWithoutApplicantInput> | LikedJobCreateWithoutApplicantInput[] | LikedJobUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: LikedJobCreateOrConnectWithoutApplicantInput | LikedJobCreateOrConnectWithoutApplicantInput[]
    createMany?: LikedJobCreateManyApplicantInputEnvelope
    connect?: LikedJobWhereUniqueInput | LikedJobWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedOneWithoutApplicantInput = {
    create?: XOR<UserCreateWithoutApplicantInput, UserUncheckedCreateWithoutApplicantInput>
    connectOrCreate?: UserCreateOrConnectWithoutApplicantInput
    connect?: UserWhereUniqueInput
  }

  export type DocUncheckedCreateNestedManyWithoutApplicantInput = {
    create?: XOR<DocCreateWithoutApplicantInput, DocUncheckedCreateWithoutApplicantInput> | DocCreateWithoutApplicantInput[] | DocUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: DocCreateOrConnectWithoutApplicantInput | DocCreateOrConnectWithoutApplicantInput[]
    createMany?: DocCreateManyApplicantInputEnvelope
    connect?: DocWhereUniqueInput | DocWhereUniqueInput[]
  }

  export type DiscardedJobUncheckedCreateNestedManyWithoutApplicantInput = {
    create?: XOR<DiscardedJobCreateWithoutApplicantInput, DiscardedJobUncheckedCreateWithoutApplicantInput> | DiscardedJobCreateWithoutApplicantInput[] | DiscardedJobUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: DiscardedJobCreateOrConnectWithoutApplicantInput | DiscardedJobCreateOrConnectWithoutApplicantInput[]
    createMany?: DiscardedJobCreateManyApplicantInputEnvelope
    connect?: DiscardedJobWhereUniqueInput | DiscardedJobWhereUniqueInput[]
  }

  export type LikedJobUncheckedCreateNestedManyWithoutApplicantInput = {
    create?: XOR<LikedJobCreateWithoutApplicantInput, LikedJobUncheckedCreateWithoutApplicantInput> | LikedJobCreateWithoutApplicantInput[] | LikedJobUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: LikedJobCreateOrConnectWithoutApplicantInput | LikedJobCreateOrConnectWithoutApplicantInput[]
    createMany?: LikedJobCreateManyApplicantInputEnvelope
    connect?: LikedJobWhereUniqueInput | LikedJobWhereUniqueInput[]
  }

  export type UserUpdateOneWithoutApplicantNestedInput = {
    create?: XOR<UserCreateWithoutApplicantInput, UserUncheckedCreateWithoutApplicantInput>
    connectOrCreate?: UserCreateOrConnectWithoutApplicantInput
    upsert?: UserUpsertWithoutApplicantInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutApplicantInput, UserUpdateWithoutApplicantInput>, UserUncheckedUpdateWithoutApplicantInput>
  }

  export type DocUpdateManyWithoutApplicantNestedInput = {
    create?: XOR<DocCreateWithoutApplicantInput, DocUncheckedCreateWithoutApplicantInput> | DocCreateWithoutApplicantInput[] | DocUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: DocCreateOrConnectWithoutApplicantInput | DocCreateOrConnectWithoutApplicantInput[]
    upsert?: DocUpsertWithWhereUniqueWithoutApplicantInput | DocUpsertWithWhereUniqueWithoutApplicantInput[]
    createMany?: DocCreateManyApplicantInputEnvelope
    set?: DocWhereUniqueInput | DocWhereUniqueInput[]
    disconnect?: DocWhereUniqueInput | DocWhereUniqueInput[]
    delete?: DocWhereUniqueInput | DocWhereUniqueInput[]
    connect?: DocWhereUniqueInput | DocWhereUniqueInput[]
    update?: DocUpdateWithWhereUniqueWithoutApplicantInput | DocUpdateWithWhereUniqueWithoutApplicantInput[]
    updateMany?: DocUpdateManyWithWhereWithoutApplicantInput | DocUpdateManyWithWhereWithoutApplicantInput[]
    deleteMany?: DocScalarWhereInput | DocScalarWhereInput[]
  }

  export type DiscardedJobUpdateManyWithoutApplicantNestedInput = {
    create?: XOR<DiscardedJobCreateWithoutApplicantInput, DiscardedJobUncheckedCreateWithoutApplicantInput> | DiscardedJobCreateWithoutApplicantInput[] | DiscardedJobUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: DiscardedJobCreateOrConnectWithoutApplicantInput | DiscardedJobCreateOrConnectWithoutApplicantInput[]
    upsert?: DiscardedJobUpsertWithWhereUniqueWithoutApplicantInput | DiscardedJobUpsertWithWhereUniqueWithoutApplicantInput[]
    createMany?: DiscardedJobCreateManyApplicantInputEnvelope
    set?: DiscardedJobWhereUniqueInput | DiscardedJobWhereUniqueInput[]
    disconnect?: DiscardedJobWhereUniqueInput | DiscardedJobWhereUniqueInput[]
    delete?: DiscardedJobWhereUniqueInput | DiscardedJobWhereUniqueInput[]
    connect?: DiscardedJobWhereUniqueInput | DiscardedJobWhereUniqueInput[]
    update?: DiscardedJobUpdateWithWhereUniqueWithoutApplicantInput | DiscardedJobUpdateWithWhereUniqueWithoutApplicantInput[]
    updateMany?: DiscardedJobUpdateManyWithWhereWithoutApplicantInput | DiscardedJobUpdateManyWithWhereWithoutApplicantInput[]
    deleteMany?: DiscardedJobScalarWhereInput | DiscardedJobScalarWhereInput[]
  }

  export type LikedJobUpdateManyWithoutApplicantNestedInput = {
    create?: XOR<LikedJobCreateWithoutApplicantInput, LikedJobUncheckedCreateWithoutApplicantInput> | LikedJobCreateWithoutApplicantInput[] | LikedJobUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: LikedJobCreateOrConnectWithoutApplicantInput | LikedJobCreateOrConnectWithoutApplicantInput[]
    upsert?: LikedJobUpsertWithWhereUniqueWithoutApplicantInput | LikedJobUpsertWithWhereUniqueWithoutApplicantInput[]
    createMany?: LikedJobCreateManyApplicantInputEnvelope
    set?: LikedJobWhereUniqueInput | LikedJobWhereUniqueInput[]
    disconnect?: LikedJobWhereUniqueInput | LikedJobWhereUniqueInput[]
    delete?: LikedJobWhereUniqueInput | LikedJobWhereUniqueInput[]
    connect?: LikedJobWhereUniqueInput | LikedJobWhereUniqueInput[]
    update?: LikedJobUpdateWithWhereUniqueWithoutApplicantInput | LikedJobUpdateWithWhereUniqueWithoutApplicantInput[]
    updateMany?: LikedJobUpdateManyWithWhereWithoutApplicantInput | LikedJobUpdateManyWithWhereWithoutApplicantInput[]
    deleteMany?: LikedJobScalarWhereInput | LikedJobScalarWhereInput[]
  }

  export type UserUncheckedUpdateOneWithoutApplicantNestedInput = {
    create?: XOR<UserCreateWithoutApplicantInput, UserUncheckedCreateWithoutApplicantInput>
    connectOrCreate?: UserCreateOrConnectWithoutApplicantInput
    upsert?: UserUpsertWithoutApplicantInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutApplicantInput, UserUpdateWithoutApplicantInput>, UserUncheckedUpdateWithoutApplicantInput>
  }

  export type DocUncheckedUpdateManyWithoutApplicantNestedInput = {
    create?: XOR<DocCreateWithoutApplicantInput, DocUncheckedCreateWithoutApplicantInput> | DocCreateWithoutApplicantInput[] | DocUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: DocCreateOrConnectWithoutApplicantInput | DocCreateOrConnectWithoutApplicantInput[]
    upsert?: DocUpsertWithWhereUniqueWithoutApplicantInput | DocUpsertWithWhereUniqueWithoutApplicantInput[]
    createMany?: DocCreateManyApplicantInputEnvelope
    set?: DocWhereUniqueInput | DocWhereUniqueInput[]
    disconnect?: DocWhereUniqueInput | DocWhereUniqueInput[]
    delete?: DocWhereUniqueInput | DocWhereUniqueInput[]
    connect?: DocWhereUniqueInput | DocWhereUniqueInput[]
    update?: DocUpdateWithWhereUniqueWithoutApplicantInput | DocUpdateWithWhereUniqueWithoutApplicantInput[]
    updateMany?: DocUpdateManyWithWhereWithoutApplicantInput | DocUpdateManyWithWhereWithoutApplicantInput[]
    deleteMany?: DocScalarWhereInput | DocScalarWhereInput[]
  }

  export type DiscardedJobUncheckedUpdateManyWithoutApplicantNestedInput = {
    create?: XOR<DiscardedJobCreateWithoutApplicantInput, DiscardedJobUncheckedCreateWithoutApplicantInput> | DiscardedJobCreateWithoutApplicantInput[] | DiscardedJobUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: DiscardedJobCreateOrConnectWithoutApplicantInput | DiscardedJobCreateOrConnectWithoutApplicantInput[]
    upsert?: DiscardedJobUpsertWithWhereUniqueWithoutApplicantInput | DiscardedJobUpsertWithWhereUniqueWithoutApplicantInput[]
    createMany?: DiscardedJobCreateManyApplicantInputEnvelope
    set?: DiscardedJobWhereUniqueInput | DiscardedJobWhereUniqueInput[]
    disconnect?: DiscardedJobWhereUniqueInput | DiscardedJobWhereUniqueInput[]
    delete?: DiscardedJobWhereUniqueInput | DiscardedJobWhereUniqueInput[]
    connect?: DiscardedJobWhereUniqueInput | DiscardedJobWhereUniqueInput[]
    update?: DiscardedJobUpdateWithWhereUniqueWithoutApplicantInput | DiscardedJobUpdateWithWhereUniqueWithoutApplicantInput[]
    updateMany?: DiscardedJobUpdateManyWithWhereWithoutApplicantInput | DiscardedJobUpdateManyWithWhereWithoutApplicantInput[]
    deleteMany?: DiscardedJobScalarWhereInput | DiscardedJobScalarWhereInput[]
  }

  export type LikedJobUncheckedUpdateManyWithoutApplicantNestedInput = {
    create?: XOR<LikedJobCreateWithoutApplicantInput, LikedJobUncheckedCreateWithoutApplicantInput> | LikedJobCreateWithoutApplicantInput[] | LikedJobUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: LikedJobCreateOrConnectWithoutApplicantInput | LikedJobCreateOrConnectWithoutApplicantInput[]
    upsert?: LikedJobUpsertWithWhereUniqueWithoutApplicantInput | LikedJobUpsertWithWhereUniqueWithoutApplicantInput[]
    createMany?: LikedJobCreateManyApplicantInputEnvelope
    set?: LikedJobWhereUniqueInput | LikedJobWhereUniqueInput[]
    disconnect?: LikedJobWhereUniqueInput | LikedJobWhereUniqueInput[]
    delete?: LikedJobWhereUniqueInput | LikedJobWhereUniqueInput[]
    connect?: LikedJobWhereUniqueInput | LikedJobWhereUniqueInput[]
    update?: LikedJobUpdateWithWhereUniqueWithoutApplicantInput | LikedJobUpdateWithWhereUniqueWithoutApplicantInput[]
    updateMany?: LikedJobUpdateManyWithWhereWithoutApplicantInput | LikedJobUpdateManyWithWhereWithoutApplicantInput[]
    deleteMany?: LikedJobScalarWhereInput | LikedJobScalarWhereInput[]
  }

  export type ApplicantCreateNestedOneWithoutDocsInput = {
    create?: XOR<ApplicantCreateWithoutDocsInput, ApplicantUncheckedCreateWithoutDocsInput>
    connectOrCreate?: ApplicantCreateOrConnectWithoutDocsInput
    connect?: ApplicantWhereUniqueInput
  }

  export type ApplicantUpdateOneRequiredWithoutDocsNestedInput = {
    create?: XOR<ApplicantCreateWithoutDocsInput, ApplicantUncheckedCreateWithoutDocsInput>
    connectOrCreate?: ApplicantCreateOrConnectWithoutDocsInput
    upsert?: ApplicantUpsertWithoutDocsInput
    connect?: ApplicantWhereUniqueInput
    update?: XOR<XOR<ApplicantUpdateToOneWithWhereWithoutDocsInput, ApplicantUpdateWithoutDocsInput>, ApplicantUncheckedUpdateWithoutDocsInput>
  }

  export type JobPostingCreateNestedManyWithoutJobCategoryInput = {
    create?: XOR<JobPostingCreateWithoutJobCategoryInput, JobPostingUncheckedCreateWithoutJobCategoryInput> | JobPostingCreateWithoutJobCategoryInput[] | JobPostingUncheckedCreateWithoutJobCategoryInput[]
    connectOrCreate?: JobPostingCreateOrConnectWithoutJobCategoryInput | JobPostingCreateOrConnectWithoutJobCategoryInput[]
    createMany?: JobPostingCreateManyJobCategoryInputEnvelope
    connect?: JobPostingWhereUniqueInput | JobPostingWhereUniqueInput[]
  }

  export type JobPostingUncheckedCreateNestedManyWithoutJobCategoryInput = {
    create?: XOR<JobPostingCreateWithoutJobCategoryInput, JobPostingUncheckedCreateWithoutJobCategoryInput> | JobPostingCreateWithoutJobCategoryInput[] | JobPostingUncheckedCreateWithoutJobCategoryInput[]
    connectOrCreate?: JobPostingCreateOrConnectWithoutJobCategoryInput | JobPostingCreateOrConnectWithoutJobCategoryInput[]
    createMany?: JobPostingCreateManyJobCategoryInputEnvelope
    connect?: JobPostingWhereUniqueInput | JobPostingWhereUniqueInput[]
  }

  export type JobPostingUpdateManyWithoutJobCategoryNestedInput = {
    create?: XOR<JobPostingCreateWithoutJobCategoryInput, JobPostingUncheckedCreateWithoutJobCategoryInput> | JobPostingCreateWithoutJobCategoryInput[] | JobPostingUncheckedCreateWithoutJobCategoryInput[]
    connectOrCreate?: JobPostingCreateOrConnectWithoutJobCategoryInput | JobPostingCreateOrConnectWithoutJobCategoryInput[]
    upsert?: JobPostingUpsertWithWhereUniqueWithoutJobCategoryInput | JobPostingUpsertWithWhereUniqueWithoutJobCategoryInput[]
    createMany?: JobPostingCreateManyJobCategoryInputEnvelope
    set?: JobPostingWhereUniqueInput | JobPostingWhereUniqueInput[]
    disconnect?: JobPostingWhereUniqueInput | JobPostingWhereUniqueInput[]
    delete?: JobPostingWhereUniqueInput | JobPostingWhereUniqueInput[]
    connect?: JobPostingWhereUniqueInput | JobPostingWhereUniqueInput[]
    update?: JobPostingUpdateWithWhereUniqueWithoutJobCategoryInput | JobPostingUpdateWithWhereUniqueWithoutJobCategoryInput[]
    updateMany?: JobPostingUpdateManyWithWhereWithoutJobCategoryInput | JobPostingUpdateManyWithWhereWithoutJobCategoryInput[]
    deleteMany?: JobPostingScalarWhereInput | JobPostingScalarWhereInput[]
  }

  export type JobPostingUncheckedUpdateManyWithoutJobCategoryNestedInput = {
    create?: XOR<JobPostingCreateWithoutJobCategoryInput, JobPostingUncheckedCreateWithoutJobCategoryInput> | JobPostingCreateWithoutJobCategoryInput[] | JobPostingUncheckedCreateWithoutJobCategoryInput[]
    connectOrCreate?: JobPostingCreateOrConnectWithoutJobCategoryInput | JobPostingCreateOrConnectWithoutJobCategoryInput[]
    upsert?: JobPostingUpsertWithWhereUniqueWithoutJobCategoryInput | JobPostingUpsertWithWhereUniqueWithoutJobCategoryInput[]
    createMany?: JobPostingCreateManyJobCategoryInputEnvelope
    set?: JobPostingWhereUniqueInput | JobPostingWhereUniqueInput[]
    disconnect?: JobPostingWhereUniqueInput | JobPostingWhereUniqueInput[]
    delete?: JobPostingWhereUniqueInput | JobPostingWhereUniqueInput[]
    connect?: JobPostingWhereUniqueInput | JobPostingWhereUniqueInput[]
    update?: JobPostingUpdateWithWhereUniqueWithoutJobCategoryInput | JobPostingUpdateWithWhereUniqueWithoutJobCategoryInput[]
    updateMany?: JobPostingUpdateManyWithWhereWithoutJobCategoryInput | JobPostingUpdateManyWithWhereWithoutJobCategoryInput[]
    deleteMany?: JobPostingScalarWhereInput | JobPostingScalarWhereInput[]
  }

  export type EmployerCreateNestedOneWithoutJobPostingsInput = {
    create?: XOR<EmployerCreateWithoutJobPostingsInput, EmployerUncheckedCreateWithoutJobPostingsInput>
    connectOrCreate?: EmployerCreateOrConnectWithoutJobPostingsInput
    connect?: EmployerWhereUniqueInput
  }

  export type JobCategoryCreateNestedOneWithoutJobPostingsInput = {
    create?: XOR<JobCategoryCreateWithoutJobPostingsInput, JobCategoryUncheckedCreateWithoutJobPostingsInput>
    connectOrCreate?: JobCategoryCreateOrConnectWithoutJobPostingsInput
    connect?: JobCategoryWhereUniqueInput
  }

  export type DiscardedJobCreateNestedManyWithoutJobPostingInput = {
    create?: XOR<DiscardedJobCreateWithoutJobPostingInput, DiscardedJobUncheckedCreateWithoutJobPostingInput> | DiscardedJobCreateWithoutJobPostingInput[] | DiscardedJobUncheckedCreateWithoutJobPostingInput[]
    connectOrCreate?: DiscardedJobCreateOrConnectWithoutJobPostingInput | DiscardedJobCreateOrConnectWithoutJobPostingInput[]
    createMany?: DiscardedJobCreateManyJobPostingInputEnvelope
    connect?: DiscardedJobWhereUniqueInput | DiscardedJobWhereUniqueInput[]
  }

  export type LikedJobCreateNestedManyWithoutJobPostingInput = {
    create?: XOR<LikedJobCreateWithoutJobPostingInput, LikedJobUncheckedCreateWithoutJobPostingInput> | LikedJobCreateWithoutJobPostingInput[] | LikedJobUncheckedCreateWithoutJobPostingInput[]
    connectOrCreate?: LikedJobCreateOrConnectWithoutJobPostingInput | LikedJobCreateOrConnectWithoutJobPostingInput[]
    createMany?: LikedJobCreateManyJobPostingInputEnvelope
    connect?: LikedJobWhereUniqueInput | LikedJobWhereUniqueInput[]
  }

  export type DiscardedJobUncheckedCreateNestedManyWithoutJobPostingInput = {
    create?: XOR<DiscardedJobCreateWithoutJobPostingInput, DiscardedJobUncheckedCreateWithoutJobPostingInput> | DiscardedJobCreateWithoutJobPostingInput[] | DiscardedJobUncheckedCreateWithoutJobPostingInput[]
    connectOrCreate?: DiscardedJobCreateOrConnectWithoutJobPostingInput | DiscardedJobCreateOrConnectWithoutJobPostingInput[]
    createMany?: DiscardedJobCreateManyJobPostingInputEnvelope
    connect?: DiscardedJobWhereUniqueInput | DiscardedJobWhereUniqueInput[]
  }

  export type LikedJobUncheckedCreateNestedManyWithoutJobPostingInput = {
    create?: XOR<LikedJobCreateWithoutJobPostingInput, LikedJobUncheckedCreateWithoutJobPostingInput> | LikedJobCreateWithoutJobPostingInput[] | LikedJobUncheckedCreateWithoutJobPostingInput[]
    connectOrCreate?: LikedJobCreateOrConnectWithoutJobPostingInput | LikedJobCreateOrConnectWithoutJobPostingInput[]
    createMany?: LikedJobCreateManyJobPostingInputEnvelope
    connect?: LikedJobWhereUniqueInput | LikedJobWhereUniqueInput[]
  }

  export type EmployerUpdateOneRequiredWithoutJobPostingsNestedInput = {
    create?: XOR<EmployerCreateWithoutJobPostingsInput, EmployerUncheckedCreateWithoutJobPostingsInput>
    connectOrCreate?: EmployerCreateOrConnectWithoutJobPostingsInput
    upsert?: EmployerUpsertWithoutJobPostingsInput
    connect?: EmployerWhereUniqueInput
    update?: XOR<XOR<EmployerUpdateToOneWithWhereWithoutJobPostingsInput, EmployerUpdateWithoutJobPostingsInput>, EmployerUncheckedUpdateWithoutJobPostingsInput>
  }

  export type JobCategoryUpdateOneRequiredWithoutJobPostingsNestedInput = {
    create?: XOR<JobCategoryCreateWithoutJobPostingsInput, JobCategoryUncheckedCreateWithoutJobPostingsInput>
    connectOrCreate?: JobCategoryCreateOrConnectWithoutJobPostingsInput
    upsert?: JobCategoryUpsertWithoutJobPostingsInput
    connect?: JobCategoryWhereUniqueInput
    update?: XOR<XOR<JobCategoryUpdateToOneWithWhereWithoutJobPostingsInput, JobCategoryUpdateWithoutJobPostingsInput>, JobCategoryUncheckedUpdateWithoutJobPostingsInput>
  }

  export type DiscardedJobUpdateManyWithoutJobPostingNestedInput = {
    create?: XOR<DiscardedJobCreateWithoutJobPostingInput, DiscardedJobUncheckedCreateWithoutJobPostingInput> | DiscardedJobCreateWithoutJobPostingInput[] | DiscardedJobUncheckedCreateWithoutJobPostingInput[]
    connectOrCreate?: DiscardedJobCreateOrConnectWithoutJobPostingInput | DiscardedJobCreateOrConnectWithoutJobPostingInput[]
    upsert?: DiscardedJobUpsertWithWhereUniqueWithoutJobPostingInput | DiscardedJobUpsertWithWhereUniqueWithoutJobPostingInput[]
    createMany?: DiscardedJobCreateManyJobPostingInputEnvelope
    set?: DiscardedJobWhereUniqueInput | DiscardedJobWhereUniqueInput[]
    disconnect?: DiscardedJobWhereUniqueInput | DiscardedJobWhereUniqueInput[]
    delete?: DiscardedJobWhereUniqueInput | DiscardedJobWhereUniqueInput[]
    connect?: DiscardedJobWhereUniqueInput | DiscardedJobWhereUniqueInput[]
    update?: DiscardedJobUpdateWithWhereUniqueWithoutJobPostingInput | DiscardedJobUpdateWithWhereUniqueWithoutJobPostingInput[]
    updateMany?: DiscardedJobUpdateManyWithWhereWithoutJobPostingInput | DiscardedJobUpdateManyWithWhereWithoutJobPostingInput[]
    deleteMany?: DiscardedJobScalarWhereInput | DiscardedJobScalarWhereInput[]
  }

  export type LikedJobUpdateManyWithoutJobPostingNestedInput = {
    create?: XOR<LikedJobCreateWithoutJobPostingInput, LikedJobUncheckedCreateWithoutJobPostingInput> | LikedJobCreateWithoutJobPostingInput[] | LikedJobUncheckedCreateWithoutJobPostingInput[]
    connectOrCreate?: LikedJobCreateOrConnectWithoutJobPostingInput | LikedJobCreateOrConnectWithoutJobPostingInput[]
    upsert?: LikedJobUpsertWithWhereUniqueWithoutJobPostingInput | LikedJobUpsertWithWhereUniqueWithoutJobPostingInput[]
    createMany?: LikedJobCreateManyJobPostingInputEnvelope
    set?: LikedJobWhereUniqueInput | LikedJobWhereUniqueInput[]
    disconnect?: LikedJobWhereUniqueInput | LikedJobWhereUniqueInput[]
    delete?: LikedJobWhereUniqueInput | LikedJobWhereUniqueInput[]
    connect?: LikedJobWhereUniqueInput | LikedJobWhereUniqueInput[]
    update?: LikedJobUpdateWithWhereUniqueWithoutJobPostingInput | LikedJobUpdateWithWhereUniqueWithoutJobPostingInput[]
    updateMany?: LikedJobUpdateManyWithWhereWithoutJobPostingInput | LikedJobUpdateManyWithWhereWithoutJobPostingInput[]
    deleteMany?: LikedJobScalarWhereInput | LikedJobScalarWhereInput[]
  }

  export type DiscardedJobUncheckedUpdateManyWithoutJobPostingNestedInput = {
    create?: XOR<DiscardedJobCreateWithoutJobPostingInput, DiscardedJobUncheckedCreateWithoutJobPostingInput> | DiscardedJobCreateWithoutJobPostingInput[] | DiscardedJobUncheckedCreateWithoutJobPostingInput[]
    connectOrCreate?: DiscardedJobCreateOrConnectWithoutJobPostingInput | DiscardedJobCreateOrConnectWithoutJobPostingInput[]
    upsert?: DiscardedJobUpsertWithWhereUniqueWithoutJobPostingInput | DiscardedJobUpsertWithWhereUniqueWithoutJobPostingInput[]
    createMany?: DiscardedJobCreateManyJobPostingInputEnvelope
    set?: DiscardedJobWhereUniqueInput | DiscardedJobWhereUniqueInput[]
    disconnect?: DiscardedJobWhereUniqueInput | DiscardedJobWhereUniqueInput[]
    delete?: DiscardedJobWhereUniqueInput | DiscardedJobWhereUniqueInput[]
    connect?: DiscardedJobWhereUniqueInput | DiscardedJobWhereUniqueInput[]
    update?: DiscardedJobUpdateWithWhereUniqueWithoutJobPostingInput | DiscardedJobUpdateWithWhereUniqueWithoutJobPostingInput[]
    updateMany?: DiscardedJobUpdateManyWithWhereWithoutJobPostingInput | DiscardedJobUpdateManyWithWhereWithoutJobPostingInput[]
    deleteMany?: DiscardedJobScalarWhereInput | DiscardedJobScalarWhereInput[]
  }

  export type LikedJobUncheckedUpdateManyWithoutJobPostingNestedInput = {
    create?: XOR<LikedJobCreateWithoutJobPostingInput, LikedJobUncheckedCreateWithoutJobPostingInput> | LikedJobCreateWithoutJobPostingInput[] | LikedJobUncheckedCreateWithoutJobPostingInput[]
    connectOrCreate?: LikedJobCreateOrConnectWithoutJobPostingInput | LikedJobCreateOrConnectWithoutJobPostingInput[]
    upsert?: LikedJobUpsertWithWhereUniqueWithoutJobPostingInput | LikedJobUpsertWithWhereUniqueWithoutJobPostingInput[]
    createMany?: LikedJobCreateManyJobPostingInputEnvelope
    set?: LikedJobWhereUniqueInput | LikedJobWhereUniqueInput[]
    disconnect?: LikedJobWhereUniqueInput | LikedJobWhereUniqueInput[]
    delete?: LikedJobWhereUniqueInput | LikedJobWhereUniqueInput[]
    connect?: LikedJobWhereUniqueInput | LikedJobWhereUniqueInput[]
    update?: LikedJobUpdateWithWhereUniqueWithoutJobPostingInput | LikedJobUpdateWithWhereUniqueWithoutJobPostingInput[]
    updateMany?: LikedJobUpdateManyWithWhereWithoutJobPostingInput | LikedJobUpdateManyWithWhereWithoutJobPostingInput[]
    deleteMany?: LikedJobScalarWhereInput | LikedJobScalarWhereInput[]
  }

  export type JobPostingCreateNestedOneWithoutDiscardedJobsInput = {
    create?: XOR<JobPostingCreateWithoutDiscardedJobsInput, JobPostingUncheckedCreateWithoutDiscardedJobsInput>
    connectOrCreate?: JobPostingCreateOrConnectWithoutDiscardedJobsInput
    connect?: JobPostingWhereUniqueInput
  }

  export type ApplicantCreateNestedOneWithoutDiscardedJobsInput = {
    create?: XOR<ApplicantCreateWithoutDiscardedJobsInput, ApplicantUncheckedCreateWithoutDiscardedJobsInput>
    connectOrCreate?: ApplicantCreateOrConnectWithoutDiscardedJobsInput
    connect?: ApplicantWhereUniqueInput
  }

  export type JobPostingUpdateOneRequiredWithoutDiscardedJobsNestedInput = {
    create?: XOR<JobPostingCreateWithoutDiscardedJobsInput, JobPostingUncheckedCreateWithoutDiscardedJobsInput>
    connectOrCreate?: JobPostingCreateOrConnectWithoutDiscardedJobsInput
    upsert?: JobPostingUpsertWithoutDiscardedJobsInput
    connect?: JobPostingWhereUniqueInput
    update?: XOR<XOR<JobPostingUpdateToOneWithWhereWithoutDiscardedJobsInput, JobPostingUpdateWithoutDiscardedJobsInput>, JobPostingUncheckedUpdateWithoutDiscardedJobsInput>
  }

  export type ApplicantUpdateOneRequiredWithoutDiscardedJobsNestedInput = {
    create?: XOR<ApplicantCreateWithoutDiscardedJobsInput, ApplicantUncheckedCreateWithoutDiscardedJobsInput>
    connectOrCreate?: ApplicantCreateOrConnectWithoutDiscardedJobsInput
    upsert?: ApplicantUpsertWithoutDiscardedJobsInput
    connect?: ApplicantWhereUniqueInput
    update?: XOR<XOR<ApplicantUpdateToOneWithWhereWithoutDiscardedJobsInput, ApplicantUpdateWithoutDiscardedJobsInput>, ApplicantUncheckedUpdateWithoutDiscardedJobsInput>
  }

  export type JobPostingCreateNestedOneWithoutLikedJobsInput = {
    create?: XOR<JobPostingCreateWithoutLikedJobsInput, JobPostingUncheckedCreateWithoutLikedJobsInput>
    connectOrCreate?: JobPostingCreateOrConnectWithoutLikedJobsInput
    connect?: JobPostingWhereUniqueInput
  }

  export type ApplicantCreateNestedOneWithoutLikedJobsInput = {
    create?: XOR<ApplicantCreateWithoutLikedJobsInput, ApplicantUncheckedCreateWithoutLikedJobsInput>
    connectOrCreate?: ApplicantCreateOrConnectWithoutLikedJobsInput
    connect?: ApplicantWhereUniqueInput
  }

  export type JobPostingUpdateOneRequiredWithoutLikedJobsNestedInput = {
    create?: XOR<JobPostingCreateWithoutLikedJobsInput, JobPostingUncheckedCreateWithoutLikedJobsInput>
    connectOrCreate?: JobPostingCreateOrConnectWithoutLikedJobsInput
    upsert?: JobPostingUpsertWithoutLikedJobsInput
    connect?: JobPostingWhereUniqueInput
    update?: XOR<XOR<JobPostingUpdateToOneWithWhereWithoutLikedJobsInput, JobPostingUpdateWithoutLikedJobsInput>, JobPostingUncheckedUpdateWithoutLikedJobsInput>
  }

  export type ApplicantUpdateOneRequiredWithoutLikedJobsNestedInput = {
    create?: XOR<ApplicantCreateWithoutLikedJobsInput, ApplicantUncheckedCreateWithoutLikedJobsInput>
    connectOrCreate?: ApplicantCreateOrConnectWithoutLikedJobsInput
    upsert?: ApplicantUpsertWithoutLikedJobsInput
    connect?: ApplicantWhereUniqueInput
    update?: XOR<XOR<ApplicantUpdateToOneWithWhereWithoutLikedJobsInput, ApplicantUpdateWithoutLikedJobsInput>, ApplicantUncheckedUpdateWithoutLikedJobsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ApplicantCreateWithoutUserInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber?: string | null
    introduction?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    docs?: DocCreateNestedManyWithoutApplicantInput
    discardedJobs?: DiscardedJobCreateNestedManyWithoutApplicantInput
    likedJobs?: LikedJobCreateNestedManyWithoutApplicantInput
  }

  export type ApplicantUncheckedCreateWithoutUserInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber?: string | null
    introduction?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    docs?: DocUncheckedCreateNestedManyWithoutApplicantInput
    discardedJobs?: DiscardedJobUncheckedCreateNestedManyWithoutApplicantInput
    likedJobs?: LikedJobUncheckedCreateNestedManyWithoutApplicantInput
  }

  export type ApplicantCreateOrConnectWithoutUserInput = {
    where: ApplicantWhereUniqueInput
    create: XOR<ApplicantCreateWithoutUserInput, ApplicantUncheckedCreateWithoutUserInput>
  }

  export type EmployerCreateWithoutUserInput = {
    id?: string
    name: string
    address: string
    websiteUrl?: string | null
    category: string
    createdAt?: Date | string
    updatedAt?: Date | string
    jobPostings?: JobPostingCreateNestedManyWithoutEmployerInput
  }

  export type EmployerUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    address: string
    websiteUrl?: string | null
    category: string
    createdAt?: Date | string
    updatedAt?: Date | string
    jobPostings?: JobPostingUncheckedCreateNestedManyWithoutEmployerInput
  }

  export type EmployerCreateOrConnectWithoutUserInput = {
    where: EmployerWhereUniqueInput
    create: XOR<EmployerCreateWithoutUserInput, EmployerUncheckedCreateWithoutUserInput>
  }

  export type ApplicantUpsertWithoutUserInput = {
    update: XOR<ApplicantUpdateWithoutUserInput, ApplicantUncheckedUpdateWithoutUserInput>
    create: XOR<ApplicantCreateWithoutUserInput, ApplicantUncheckedCreateWithoutUserInput>
    where?: ApplicantWhereInput
  }

  export type ApplicantUpdateToOneWithWhereWithoutUserInput = {
    where?: ApplicantWhereInput
    data: XOR<ApplicantUpdateWithoutUserInput, ApplicantUncheckedUpdateWithoutUserInput>
  }

  export type ApplicantUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    introduction?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    docs?: DocUpdateManyWithoutApplicantNestedInput
    discardedJobs?: DiscardedJobUpdateManyWithoutApplicantNestedInput
    likedJobs?: LikedJobUpdateManyWithoutApplicantNestedInput
  }

  export type ApplicantUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    introduction?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    docs?: DocUncheckedUpdateManyWithoutApplicantNestedInput
    discardedJobs?: DiscardedJobUncheckedUpdateManyWithoutApplicantNestedInput
    likedJobs?: LikedJobUncheckedUpdateManyWithoutApplicantNestedInput
  }

  export type EmployerUpsertWithoutUserInput = {
    update: XOR<EmployerUpdateWithoutUserInput, EmployerUncheckedUpdateWithoutUserInput>
    create: XOR<EmployerCreateWithoutUserInput, EmployerUncheckedCreateWithoutUserInput>
    where?: EmployerWhereInput
  }

  export type EmployerUpdateToOneWithWhereWithoutUserInput = {
    where?: EmployerWhereInput
    data: XOR<EmployerUpdateWithoutUserInput, EmployerUncheckedUpdateWithoutUserInput>
  }

  export type EmployerUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobPostings?: JobPostingUpdateManyWithoutEmployerNestedInput
  }

  export type EmployerUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobPostings?: JobPostingUncheckedUpdateManyWithoutEmployerNestedInput
  }

  export type UserCreateWithoutEmployerInput = {
    id?: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    applicant?: ApplicantCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEmployerInput = {
    id?: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    applicantId?: string | null
  }

  export type UserCreateOrConnectWithoutEmployerInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEmployerInput, UserUncheckedCreateWithoutEmployerInput>
  }

  export type JobPostingCreateWithoutEmployerInput = {
    id?: string
    title: string
    description: string
    hourlySalaryRange: string
    expiryDate: Date | string
    jobName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    jobCategory: JobCategoryCreateNestedOneWithoutJobPostingsInput
    discardedJobs?: DiscardedJobCreateNestedManyWithoutJobPostingInput
    likedJobs?: LikedJobCreateNestedManyWithoutJobPostingInput
  }

  export type JobPostingUncheckedCreateWithoutEmployerInput = {
    id?: string
    title: string
    description: string
    hourlySalaryRange: string
    expiryDate: Date | string
    jobName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    jobCategoryId: string
    discardedJobs?: DiscardedJobUncheckedCreateNestedManyWithoutJobPostingInput
    likedJobs?: LikedJobUncheckedCreateNestedManyWithoutJobPostingInput
  }

  export type JobPostingCreateOrConnectWithoutEmployerInput = {
    where: JobPostingWhereUniqueInput
    create: XOR<JobPostingCreateWithoutEmployerInput, JobPostingUncheckedCreateWithoutEmployerInput>
  }

  export type JobPostingCreateManyEmployerInputEnvelope = {
    data: JobPostingCreateManyEmployerInput | JobPostingCreateManyEmployerInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutEmployerInput = {
    update: XOR<UserUpdateWithoutEmployerInput, UserUncheckedUpdateWithoutEmployerInput>
    create: XOR<UserCreateWithoutEmployerInput, UserUncheckedCreateWithoutEmployerInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEmployerInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEmployerInput, UserUncheckedUpdateWithoutEmployerInput>
  }

  export type UserUpdateWithoutEmployerInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicant?: ApplicantUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEmployerInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicantId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type JobPostingUpsertWithWhereUniqueWithoutEmployerInput = {
    where: JobPostingWhereUniqueInput
    update: XOR<JobPostingUpdateWithoutEmployerInput, JobPostingUncheckedUpdateWithoutEmployerInput>
    create: XOR<JobPostingCreateWithoutEmployerInput, JobPostingUncheckedCreateWithoutEmployerInput>
  }

  export type JobPostingUpdateWithWhereUniqueWithoutEmployerInput = {
    where: JobPostingWhereUniqueInput
    data: XOR<JobPostingUpdateWithoutEmployerInput, JobPostingUncheckedUpdateWithoutEmployerInput>
  }

  export type JobPostingUpdateManyWithWhereWithoutEmployerInput = {
    where: JobPostingScalarWhereInput
    data: XOR<JobPostingUpdateManyMutationInput, JobPostingUncheckedUpdateManyWithoutEmployerInput>
  }

  export type JobPostingScalarWhereInput = {
    AND?: JobPostingScalarWhereInput | JobPostingScalarWhereInput[]
    OR?: JobPostingScalarWhereInput[]
    NOT?: JobPostingScalarWhereInput | JobPostingScalarWhereInput[]
    id?: StringFilter<"JobPosting"> | string
    title?: StringFilter<"JobPosting"> | string
    description?: StringFilter<"JobPosting"> | string
    hourlySalaryRange?: StringFilter<"JobPosting"> | string
    expiryDate?: DateTimeFilter<"JobPosting"> | Date | string
    jobName?: StringFilter<"JobPosting"> | string
    createdAt?: DateTimeFilter<"JobPosting"> | Date | string
    updatedAt?: DateTimeFilter<"JobPosting"> | Date | string
    employerId?: StringFilter<"JobPosting"> | string
    jobCategoryId?: StringFilter<"JobPosting"> | string
  }

  export type UserCreateWithoutApplicantInput = {
    id?: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    employer?: EmployerCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutApplicantInput = {
    id?: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    employerId?: string | null
  }

  export type UserCreateOrConnectWithoutApplicantInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutApplicantInput, UserUncheckedCreateWithoutApplicantInput>
  }

  export type DocCreateWithoutApplicantInput = {
    id?: string
    filename: string
    fileUrl: string
    fileType: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocUncheckedCreateWithoutApplicantInput = {
    id?: string
    filename: string
    fileUrl: string
    fileType: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocCreateOrConnectWithoutApplicantInput = {
    where: DocWhereUniqueInput
    create: XOR<DocCreateWithoutApplicantInput, DocUncheckedCreateWithoutApplicantInput>
  }

  export type DocCreateManyApplicantInputEnvelope = {
    data: DocCreateManyApplicantInput | DocCreateManyApplicantInput[]
    skipDuplicates?: boolean
  }

  export type DiscardedJobCreateWithoutApplicantInput = {
    id?: string
    createdAt?: Date | string
    jobPosting: JobPostingCreateNestedOneWithoutDiscardedJobsInput
  }

  export type DiscardedJobUncheckedCreateWithoutApplicantInput = {
    id?: string
    createdAt?: Date | string
    jobId: string
  }

  export type DiscardedJobCreateOrConnectWithoutApplicantInput = {
    where: DiscardedJobWhereUniqueInput
    create: XOR<DiscardedJobCreateWithoutApplicantInput, DiscardedJobUncheckedCreateWithoutApplicantInput>
  }

  export type DiscardedJobCreateManyApplicantInputEnvelope = {
    data: DiscardedJobCreateManyApplicantInput | DiscardedJobCreateManyApplicantInput[]
    skipDuplicates?: boolean
  }

  export type LikedJobCreateWithoutApplicantInput = {
    id?: string
    createdAt?: Date | string
    jobPosting: JobPostingCreateNestedOneWithoutLikedJobsInput
  }

  export type LikedJobUncheckedCreateWithoutApplicantInput = {
    id?: string
    createdAt?: Date | string
    jobId: string
  }

  export type LikedJobCreateOrConnectWithoutApplicantInput = {
    where: LikedJobWhereUniqueInput
    create: XOR<LikedJobCreateWithoutApplicantInput, LikedJobUncheckedCreateWithoutApplicantInput>
  }

  export type LikedJobCreateManyApplicantInputEnvelope = {
    data: LikedJobCreateManyApplicantInput | LikedJobCreateManyApplicantInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutApplicantInput = {
    update: XOR<UserUpdateWithoutApplicantInput, UserUncheckedUpdateWithoutApplicantInput>
    create: XOR<UserCreateWithoutApplicantInput, UserUncheckedCreateWithoutApplicantInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutApplicantInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutApplicantInput, UserUncheckedUpdateWithoutApplicantInput>
  }

  export type UserUpdateWithoutApplicantInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employer?: EmployerUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutApplicantInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employerId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocUpsertWithWhereUniqueWithoutApplicantInput = {
    where: DocWhereUniqueInput
    update: XOR<DocUpdateWithoutApplicantInput, DocUncheckedUpdateWithoutApplicantInput>
    create: XOR<DocCreateWithoutApplicantInput, DocUncheckedCreateWithoutApplicantInput>
  }

  export type DocUpdateWithWhereUniqueWithoutApplicantInput = {
    where: DocWhereUniqueInput
    data: XOR<DocUpdateWithoutApplicantInput, DocUncheckedUpdateWithoutApplicantInput>
  }

  export type DocUpdateManyWithWhereWithoutApplicantInput = {
    where: DocScalarWhereInput
    data: XOR<DocUpdateManyMutationInput, DocUncheckedUpdateManyWithoutApplicantInput>
  }

  export type DocScalarWhereInput = {
    AND?: DocScalarWhereInput | DocScalarWhereInput[]
    OR?: DocScalarWhereInput[]
    NOT?: DocScalarWhereInput | DocScalarWhereInput[]
    id?: StringFilter<"Doc"> | string
    filename?: StringFilter<"Doc"> | string
    fileUrl?: StringFilter<"Doc"> | string
    fileType?: StringFilter<"Doc"> | string
    createdAt?: DateTimeFilter<"Doc"> | Date | string
    updatedAt?: DateTimeFilter<"Doc"> | Date | string
    applicantId?: StringFilter<"Doc"> | string
  }

  export type DiscardedJobUpsertWithWhereUniqueWithoutApplicantInput = {
    where: DiscardedJobWhereUniqueInput
    update: XOR<DiscardedJobUpdateWithoutApplicantInput, DiscardedJobUncheckedUpdateWithoutApplicantInput>
    create: XOR<DiscardedJobCreateWithoutApplicantInput, DiscardedJobUncheckedCreateWithoutApplicantInput>
  }

  export type DiscardedJobUpdateWithWhereUniqueWithoutApplicantInput = {
    where: DiscardedJobWhereUniqueInput
    data: XOR<DiscardedJobUpdateWithoutApplicantInput, DiscardedJobUncheckedUpdateWithoutApplicantInput>
  }

  export type DiscardedJobUpdateManyWithWhereWithoutApplicantInput = {
    where: DiscardedJobScalarWhereInput
    data: XOR<DiscardedJobUpdateManyMutationInput, DiscardedJobUncheckedUpdateManyWithoutApplicantInput>
  }

  export type DiscardedJobScalarWhereInput = {
    AND?: DiscardedJobScalarWhereInput | DiscardedJobScalarWhereInput[]
    OR?: DiscardedJobScalarWhereInput[]
    NOT?: DiscardedJobScalarWhereInput | DiscardedJobScalarWhereInput[]
    id?: StringFilter<"DiscardedJob"> | string
    createdAt?: DateTimeFilter<"DiscardedJob"> | Date | string
    jobId?: StringFilter<"DiscardedJob"> | string
    applicantId?: StringFilter<"DiscardedJob"> | string
  }

  export type LikedJobUpsertWithWhereUniqueWithoutApplicantInput = {
    where: LikedJobWhereUniqueInput
    update: XOR<LikedJobUpdateWithoutApplicantInput, LikedJobUncheckedUpdateWithoutApplicantInput>
    create: XOR<LikedJobCreateWithoutApplicantInput, LikedJobUncheckedCreateWithoutApplicantInput>
  }

  export type LikedJobUpdateWithWhereUniqueWithoutApplicantInput = {
    where: LikedJobWhereUniqueInput
    data: XOR<LikedJobUpdateWithoutApplicantInput, LikedJobUncheckedUpdateWithoutApplicantInput>
  }

  export type LikedJobUpdateManyWithWhereWithoutApplicantInput = {
    where: LikedJobScalarWhereInput
    data: XOR<LikedJobUpdateManyMutationInput, LikedJobUncheckedUpdateManyWithoutApplicantInput>
  }

  export type LikedJobScalarWhereInput = {
    AND?: LikedJobScalarWhereInput | LikedJobScalarWhereInput[]
    OR?: LikedJobScalarWhereInput[]
    NOT?: LikedJobScalarWhereInput | LikedJobScalarWhereInput[]
    id?: StringFilter<"LikedJob"> | string
    createdAt?: DateTimeFilter<"LikedJob"> | Date | string
    jobId?: StringFilter<"LikedJob"> | string
    applicantId?: StringFilter<"LikedJob"> | string
  }

  export type ApplicantCreateWithoutDocsInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber?: string | null
    introduction?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutApplicantInput
    discardedJobs?: DiscardedJobCreateNestedManyWithoutApplicantInput
    likedJobs?: LikedJobCreateNestedManyWithoutApplicantInput
  }

  export type ApplicantUncheckedCreateWithoutDocsInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber?: string | null
    introduction?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserUncheckedCreateNestedOneWithoutApplicantInput
    discardedJobs?: DiscardedJobUncheckedCreateNestedManyWithoutApplicantInput
    likedJobs?: LikedJobUncheckedCreateNestedManyWithoutApplicantInput
  }

  export type ApplicantCreateOrConnectWithoutDocsInput = {
    where: ApplicantWhereUniqueInput
    create: XOR<ApplicantCreateWithoutDocsInput, ApplicantUncheckedCreateWithoutDocsInput>
  }

  export type ApplicantUpsertWithoutDocsInput = {
    update: XOR<ApplicantUpdateWithoutDocsInput, ApplicantUncheckedUpdateWithoutDocsInput>
    create: XOR<ApplicantCreateWithoutDocsInput, ApplicantUncheckedCreateWithoutDocsInput>
    where?: ApplicantWhereInput
  }

  export type ApplicantUpdateToOneWithWhereWithoutDocsInput = {
    where?: ApplicantWhereInput
    data: XOR<ApplicantUpdateWithoutDocsInput, ApplicantUncheckedUpdateWithoutDocsInput>
  }

  export type ApplicantUpdateWithoutDocsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    introduction?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutApplicantNestedInput
    discardedJobs?: DiscardedJobUpdateManyWithoutApplicantNestedInput
    likedJobs?: LikedJobUpdateManyWithoutApplicantNestedInput
  }

  export type ApplicantUncheckedUpdateWithoutDocsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    introduction?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUncheckedUpdateOneWithoutApplicantNestedInput
    discardedJobs?: DiscardedJobUncheckedUpdateManyWithoutApplicantNestedInput
    likedJobs?: LikedJobUncheckedUpdateManyWithoutApplicantNestedInput
  }

  export type JobPostingCreateWithoutJobCategoryInput = {
    id?: string
    title: string
    description: string
    hourlySalaryRange: string
    expiryDate: Date | string
    jobName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    employer: EmployerCreateNestedOneWithoutJobPostingsInput
    discardedJobs?: DiscardedJobCreateNestedManyWithoutJobPostingInput
    likedJobs?: LikedJobCreateNestedManyWithoutJobPostingInput
  }

  export type JobPostingUncheckedCreateWithoutJobCategoryInput = {
    id?: string
    title: string
    description: string
    hourlySalaryRange: string
    expiryDate: Date | string
    jobName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    employerId: string
    discardedJobs?: DiscardedJobUncheckedCreateNestedManyWithoutJobPostingInput
    likedJobs?: LikedJobUncheckedCreateNestedManyWithoutJobPostingInput
  }

  export type JobPostingCreateOrConnectWithoutJobCategoryInput = {
    where: JobPostingWhereUniqueInput
    create: XOR<JobPostingCreateWithoutJobCategoryInput, JobPostingUncheckedCreateWithoutJobCategoryInput>
  }

  export type JobPostingCreateManyJobCategoryInputEnvelope = {
    data: JobPostingCreateManyJobCategoryInput | JobPostingCreateManyJobCategoryInput[]
    skipDuplicates?: boolean
  }

  export type JobPostingUpsertWithWhereUniqueWithoutJobCategoryInput = {
    where: JobPostingWhereUniqueInput
    update: XOR<JobPostingUpdateWithoutJobCategoryInput, JobPostingUncheckedUpdateWithoutJobCategoryInput>
    create: XOR<JobPostingCreateWithoutJobCategoryInput, JobPostingUncheckedCreateWithoutJobCategoryInput>
  }

  export type JobPostingUpdateWithWhereUniqueWithoutJobCategoryInput = {
    where: JobPostingWhereUniqueInput
    data: XOR<JobPostingUpdateWithoutJobCategoryInput, JobPostingUncheckedUpdateWithoutJobCategoryInput>
  }

  export type JobPostingUpdateManyWithWhereWithoutJobCategoryInput = {
    where: JobPostingScalarWhereInput
    data: XOR<JobPostingUpdateManyMutationInput, JobPostingUncheckedUpdateManyWithoutJobCategoryInput>
  }

  export type EmployerCreateWithoutJobPostingsInput = {
    id?: string
    name: string
    address: string
    websiteUrl?: string | null
    category: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutEmployerInput
  }

  export type EmployerUncheckedCreateWithoutJobPostingsInput = {
    id?: string
    name: string
    address: string
    websiteUrl?: string | null
    category: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserUncheckedCreateNestedOneWithoutEmployerInput
  }

  export type EmployerCreateOrConnectWithoutJobPostingsInput = {
    where: EmployerWhereUniqueInput
    create: XOR<EmployerCreateWithoutJobPostingsInput, EmployerUncheckedCreateWithoutJobPostingsInput>
  }

  export type JobCategoryCreateWithoutJobPostingsInput = {
    id?: string
    category: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobCategoryUncheckedCreateWithoutJobPostingsInput = {
    id?: string
    category: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobCategoryCreateOrConnectWithoutJobPostingsInput = {
    where: JobCategoryWhereUniqueInput
    create: XOR<JobCategoryCreateWithoutJobPostingsInput, JobCategoryUncheckedCreateWithoutJobPostingsInput>
  }

  export type DiscardedJobCreateWithoutJobPostingInput = {
    id?: string
    createdAt?: Date | string
    applicant: ApplicantCreateNestedOneWithoutDiscardedJobsInput
  }

  export type DiscardedJobUncheckedCreateWithoutJobPostingInput = {
    id?: string
    createdAt?: Date | string
    applicantId: string
  }

  export type DiscardedJobCreateOrConnectWithoutJobPostingInput = {
    where: DiscardedJobWhereUniqueInput
    create: XOR<DiscardedJobCreateWithoutJobPostingInput, DiscardedJobUncheckedCreateWithoutJobPostingInput>
  }

  export type DiscardedJobCreateManyJobPostingInputEnvelope = {
    data: DiscardedJobCreateManyJobPostingInput | DiscardedJobCreateManyJobPostingInput[]
    skipDuplicates?: boolean
  }

  export type LikedJobCreateWithoutJobPostingInput = {
    id?: string
    createdAt?: Date | string
    applicant: ApplicantCreateNestedOneWithoutLikedJobsInput
  }

  export type LikedJobUncheckedCreateWithoutJobPostingInput = {
    id?: string
    createdAt?: Date | string
    applicantId: string
  }

  export type LikedJobCreateOrConnectWithoutJobPostingInput = {
    where: LikedJobWhereUniqueInput
    create: XOR<LikedJobCreateWithoutJobPostingInput, LikedJobUncheckedCreateWithoutJobPostingInput>
  }

  export type LikedJobCreateManyJobPostingInputEnvelope = {
    data: LikedJobCreateManyJobPostingInput | LikedJobCreateManyJobPostingInput[]
    skipDuplicates?: boolean
  }

  export type EmployerUpsertWithoutJobPostingsInput = {
    update: XOR<EmployerUpdateWithoutJobPostingsInput, EmployerUncheckedUpdateWithoutJobPostingsInput>
    create: XOR<EmployerCreateWithoutJobPostingsInput, EmployerUncheckedCreateWithoutJobPostingsInput>
    where?: EmployerWhereInput
  }

  export type EmployerUpdateToOneWithWhereWithoutJobPostingsInput = {
    where?: EmployerWhereInput
    data: XOR<EmployerUpdateWithoutJobPostingsInput, EmployerUncheckedUpdateWithoutJobPostingsInput>
  }

  export type EmployerUpdateWithoutJobPostingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutEmployerNestedInput
  }

  export type EmployerUncheckedUpdateWithoutJobPostingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUncheckedUpdateOneWithoutEmployerNestedInput
  }

  export type JobCategoryUpsertWithoutJobPostingsInput = {
    update: XOR<JobCategoryUpdateWithoutJobPostingsInput, JobCategoryUncheckedUpdateWithoutJobPostingsInput>
    create: XOR<JobCategoryCreateWithoutJobPostingsInput, JobCategoryUncheckedCreateWithoutJobPostingsInput>
    where?: JobCategoryWhereInput
  }

  export type JobCategoryUpdateToOneWithWhereWithoutJobPostingsInput = {
    where?: JobCategoryWhereInput
    data: XOR<JobCategoryUpdateWithoutJobPostingsInput, JobCategoryUncheckedUpdateWithoutJobPostingsInput>
  }

  export type JobCategoryUpdateWithoutJobPostingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobCategoryUncheckedUpdateWithoutJobPostingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiscardedJobUpsertWithWhereUniqueWithoutJobPostingInput = {
    where: DiscardedJobWhereUniqueInput
    update: XOR<DiscardedJobUpdateWithoutJobPostingInput, DiscardedJobUncheckedUpdateWithoutJobPostingInput>
    create: XOR<DiscardedJobCreateWithoutJobPostingInput, DiscardedJobUncheckedCreateWithoutJobPostingInput>
  }

  export type DiscardedJobUpdateWithWhereUniqueWithoutJobPostingInput = {
    where: DiscardedJobWhereUniqueInput
    data: XOR<DiscardedJobUpdateWithoutJobPostingInput, DiscardedJobUncheckedUpdateWithoutJobPostingInput>
  }

  export type DiscardedJobUpdateManyWithWhereWithoutJobPostingInput = {
    where: DiscardedJobScalarWhereInput
    data: XOR<DiscardedJobUpdateManyMutationInput, DiscardedJobUncheckedUpdateManyWithoutJobPostingInput>
  }

  export type LikedJobUpsertWithWhereUniqueWithoutJobPostingInput = {
    where: LikedJobWhereUniqueInput
    update: XOR<LikedJobUpdateWithoutJobPostingInput, LikedJobUncheckedUpdateWithoutJobPostingInput>
    create: XOR<LikedJobCreateWithoutJobPostingInput, LikedJobUncheckedCreateWithoutJobPostingInput>
  }

  export type LikedJobUpdateWithWhereUniqueWithoutJobPostingInput = {
    where: LikedJobWhereUniqueInput
    data: XOR<LikedJobUpdateWithoutJobPostingInput, LikedJobUncheckedUpdateWithoutJobPostingInput>
  }

  export type LikedJobUpdateManyWithWhereWithoutJobPostingInput = {
    where: LikedJobScalarWhereInput
    data: XOR<LikedJobUpdateManyMutationInput, LikedJobUncheckedUpdateManyWithoutJobPostingInput>
  }

  export type JobPostingCreateWithoutDiscardedJobsInput = {
    id?: string
    title: string
    description: string
    hourlySalaryRange: string
    expiryDate: Date | string
    jobName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    employer: EmployerCreateNestedOneWithoutJobPostingsInput
    jobCategory: JobCategoryCreateNestedOneWithoutJobPostingsInput
    likedJobs?: LikedJobCreateNestedManyWithoutJobPostingInput
  }

  export type JobPostingUncheckedCreateWithoutDiscardedJobsInput = {
    id?: string
    title: string
    description: string
    hourlySalaryRange: string
    expiryDate: Date | string
    jobName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    employerId: string
    jobCategoryId: string
    likedJobs?: LikedJobUncheckedCreateNestedManyWithoutJobPostingInput
  }

  export type JobPostingCreateOrConnectWithoutDiscardedJobsInput = {
    where: JobPostingWhereUniqueInput
    create: XOR<JobPostingCreateWithoutDiscardedJobsInput, JobPostingUncheckedCreateWithoutDiscardedJobsInput>
  }

  export type ApplicantCreateWithoutDiscardedJobsInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber?: string | null
    introduction?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutApplicantInput
    docs?: DocCreateNestedManyWithoutApplicantInput
    likedJobs?: LikedJobCreateNestedManyWithoutApplicantInput
  }

  export type ApplicantUncheckedCreateWithoutDiscardedJobsInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber?: string | null
    introduction?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserUncheckedCreateNestedOneWithoutApplicantInput
    docs?: DocUncheckedCreateNestedManyWithoutApplicantInput
    likedJobs?: LikedJobUncheckedCreateNestedManyWithoutApplicantInput
  }

  export type ApplicantCreateOrConnectWithoutDiscardedJobsInput = {
    where: ApplicantWhereUniqueInput
    create: XOR<ApplicantCreateWithoutDiscardedJobsInput, ApplicantUncheckedCreateWithoutDiscardedJobsInput>
  }

  export type JobPostingUpsertWithoutDiscardedJobsInput = {
    update: XOR<JobPostingUpdateWithoutDiscardedJobsInput, JobPostingUncheckedUpdateWithoutDiscardedJobsInput>
    create: XOR<JobPostingCreateWithoutDiscardedJobsInput, JobPostingUncheckedCreateWithoutDiscardedJobsInput>
    where?: JobPostingWhereInput
  }

  export type JobPostingUpdateToOneWithWhereWithoutDiscardedJobsInput = {
    where?: JobPostingWhereInput
    data: XOR<JobPostingUpdateWithoutDiscardedJobsInput, JobPostingUncheckedUpdateWithoutDiscardedJobsInput>
  }

  export type JobPostingUpdateWithoutDiscardedJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    hourlySalaryRange?: StringFieldUpdateOperationsInput | string
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    jobName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employer?: EmployerUpdateOneRequiredWithoutJobPostingsNestedInput
    jobCategory?: JobCategoryUpdateOneRequiredWithoutJobPostingsNestedInput
    likedJobs?: LikedJobUpdateManyWithoutJobPostingNestedInput
  }

  export type JobPostingUncheckedUpdateWithoutDiscardedJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    hourlySalaryRange?: StringFieldUpdateOperationsInput | string
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    jobName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employerId?: StringFieldUpdateOperationsInput | string
    jobCategoryId?: StringFieldUpdateOperationsInput | string
    likedJobs?: LikedJobUncheckedUpdateManyWithoutJobPostingNestedInput
  }

  export type ApplicantUpsertWithoutDiscardedJobsInput = {
    update: XOR<ApplicantUpdateWithoutDiscardedJobsInput, ApplicantUncheckedUpdateWithoutDiscardedJobsInput>
    create: XOR<ApplicantCreateWithoutDiscardedJobsInput, ApplicantUncheckedCreateWithoutDiscardedJobsInput>
    where?: ApplicantWhereInput
  }

  export type ApplicantUpdateToOneWithWhereWithoutDiscardedJobsInput = {
    where?: ApplicantWhereInput
    data: XOR<ApplicantUpdateWithoutDiscardedJobsInput, ApplicantUncheckedUpdateWithoutDiscardedJobsInput>
  }

  export type ApplicantUpdateWithoutDiscardedJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    introduction?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutApplicantNestedInput
    docs?: DocUpdateManyWithoutApplicantNestedInput
    likedJobs?: LikedJobUpdateManyWithoutApplicantNestedInput
  }

  export type ApplicantUncheckedUpdateWithoutDiscardedJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    introduction?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUncheckedUpdateOneWithoutApplicantNestedInput
    docs?: DocUncheckedUpdateManyWithoutApplicantNestedInput
    likedJobs?: LikedJobUncheckedUpdateManyWithoutApplicantNestedInput
  }

  export type JobPostingCreateWithoutLikedJobsInput = {
    id?: string
    title: string
    description: string
    hourlySalaryRange: string
    expiryDate: Date | string
    jobName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    employer: EmployerCreateNestedOneWithoutJobPostingsInput
    jobCategory: JobCategoryCreateNestedOneWithoutJobPostingsInput
    discardedJobs?: DiscardedJobCreateNestedManyWithoutJobPostingInput
  }

  export type JobPostingUncheckedCreateWithoutLikedJobsInput = {
    id?: string
    title: string
    description: string
    hourlySalaryRange: string
    expiryDate: Date | string
    jobName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    employerId: string
    jobCategoryId: string
    discardedJobs?: DiscardedJobUncheckedCreateNestedManyWithoutJobPostingInput
  }

  export type JobPostingCreateOrConnectWithoutLikedJobsInput = {
    where: JobPostingWhereUniqueInput
    create: XOR<JobPostingCreateWithoutLikedJobsInput, JobPostingUncheckedCreateWithoutLikedJobsInput>
  }

  export type ApplicantCreateWithoutLikedJobsInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber?: string | null
    introduction?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutApplicantInput
    docs?: DocCreateNestedManyWithoutApplicantInput
    discardedJobs?: DiscardedJobCreateNestedManyWithoutApplicantInput
  }

  export type ApplicantUncheckedCreateWithoutLikedJobsInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber?: string | null
    introduction?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserUncheckedCreateNestedOneWithoutApplicantInput
    docs?: DocUncheckedCreateNestedManyWithoutApplicantInput
    discardedJobs?: DiscardedJobUncheckedCreateNestedManyWithoutApplicantInput
  }

  export type ApplicantCreateOrConnectWithoutLikedJobsInput = {
    where: ApplicantWhereUniqueInput
    create: XOR<ApplicantCreateWithoutLikedJobsInput, ApplicantUncheckedCreateWithoutLikedJobsInput>
  }

  export type JobPostingUpsertWithoutLikedJobsInput = {
    update: XOR<JobPostingUpdateWithoutLikedJobsInput, JobPostingUncheckedUpdateWithoutLikedJobsInput>
    create: XOR<JobPostingCreateWithoutLikedJobsInput, JobPostingUncheckedCreateWithoutLikedJobsInput>
    where?: JobPostingWhereInput
  }

  export type JobPostingUpdateToOneWithWhereWithoutLikedJobsInput = {
    where?: JobPostingWhereInput
    data: XOR<JobPostingUpdateWithoutLikedJobsInput, JobPostingUncheckedUpdateWithoutLikedJobsInput>
  }

  export type JobPostingUpdateWithoutLikedJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    hourlySalaryRange?: StringFieldUpdateOperationsInput | string
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    jobName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employer?: EmployerUpdateOneRequiredWithoutJobPostingsNestedInput
    jobCategory?: JobCategoryUpdateOneRequiredWithoutJobPostingsNestedInput
    discardedJobs?: DiscardedJobUpdateManyWithoutJobPostingNestedInput
  }

  export type JobPostingUncheckedUpdateWithoutLikedJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    hourlySalaryRange?: StringFieldUpdateOperationsInput | string
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    jobName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employerId?: StringFieldUpdateOperationsInput | string
    jobCategoryId?: StringFieldUpdateOperationsInput | string
    discardedJobs?: DiscardedJobUncheckedUpdateManyWithoutJobPostingNestedInput
  }

  export type ApplicantUpsertWithoutLikedJobsInput = {
    update: XOR<ApplicantUpdateWithoutLikedJobsInput, ApplicantUncheckedUpdateWithoutLikedJobsInput>
    create: XOR<ApplicantCreateWithoutLikedJobsInput, ApplicantUncheckedCreateWithoutLikedJobsInput>
    where?: ApplicantWhereInput
  }

  export type ApplicantUpdateToOneWithWhereWithoutLikedJobsInput = {
    where?: ApplicantWhereInput
    data: XOR<ApplicantUpdateWithoutLikedJobsInput, ApplicantUncheckedUpdateWithoutLikedJobsInput>
  }

  export type ApplicantUpdateWithoutLikedJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    introduction?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutApplicantNestedInput
    docs?: DocUpdateManyWithoutApplicantNestedInput
    discardedJobs?: DiscardedJobUpdateManyWithoutApplicantNestedInput
  }

  export type ApplicantUncheckedUpdateWithoutLikedJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    introduction?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUncheckedUpdateOneWithoutApplicantNestedInput
    docs?: DocUncheckedUpdateManyWithoutApplicantNestedInput
    discardedJobs?: DiscardedJobUncheckedUpdateManyWithoutApplicantNestedInput
  }

  export type JobPostingCreateManyEmployerInput = {
    id?: string
    title: string
    description: string
    hourlySalaryRange: string
    expiryDate: Date | string
    jobName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    jobCategoryId: string
  }

  export type JobPostingUpdateWithoutEmployerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    hourlySalaryRange?: StringFieldUpdateOperationsInput | string
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    jobName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobCategory?: JobCategoryUpdateOneRequiredWithoutJobPostingsNestedInput
    discardedJobs?: DiscardedJobUpdateManyWithoutJobPostingNestedInput
    likedJobs?: LikedJobUpdateManyWithoutJobPostingNestedInput
  }

  export type JobPostingUncheckedUpdateWithoutEmployerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    hourlySalaryRange?: StringFieldUpdateOperationsInput | string
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    jobName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobCategoryId?: StringFieldUpdateOperationsInput | string
    discardedJobs?: DiscardedJobUncheckedUpdateManyWithoutJobPostingNestedInput
    likedJobs?: LikedJobUncheckedUpdateManyWithoutJobPostingNestedInput
  }

  export type JobPostingUncheckedUpdateManyWithoutEmployerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    hourlySalaryRange?: StringFieldUpdateOperationsInput | string
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    jobName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobCategoryId?: StringFieldUpdateOperationsInput | string
  }

  export type DocCreateManyApplicantInput = {
    id?: string
    filename: string
    fileUrl: string
    fileType: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DiscardedJobCreateManyApplicantInput = {
    id?: string
    createdAt?: Date | string
    jobId: string
  }

  export type LikedJobCreateManyApplicantInput = {
    id?: string
    createdAt?: Date | string
    jobId: string
  }

  export type DocUpdateWithoutApplicantInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocUncheckedUpdateWithoutApplicantInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocUncheckedUpdateManyWithoutApplicantInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiscardedJobUpdateWithoutApplicantInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobPosting?: JobPostingUpdateOneRequiredWithoutDiscardedJobsNestedInput
  }

  export type DiscardedJobUncheckedUpdateWithoutApplicantInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobId?: StringFieldUpdateOperationsInput | string
  }

  export type DiscardedJobUncheckedUpdateManyWithoutApplicantInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobId?: StringFieldUpdateOperationsInput | string
  }

  export type LikedJobUpdateWithoutApplicantInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobPosting?: JobPostingUpdateOneRequiredWithoutLikedJobsNestedInput
  }

  export type LikedJobUncheckedUpdateWithoutApplicantInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobId?: StringFieldUpdateOperationsInput | string
  }

  export type LikedJobUncheckedUpdateManyWithoutApplicantInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobId?: StringFieldUpdateOperationsInput | string
  }

  export type JobPostingCreateManyJobCategoryInput = {
    id?: string
    title: string
    description: string
    hourlySalaryRange: string
    expiryDate: Date | string
    jobName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    employerId: string
  }

  export type JobPostingUpdateWithoutJobCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    hourlySalaryRange?: StringFieldUpdateOperationsInput | string
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    jobName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employer?: EmployerUpdateOneRequiredWithoutJobPostingsNestedInput
    discardedJobs?: DiscardedJobUpdateManyWithoutJobPostingNestedInput
    likedJobs?: LikedJobUpdateManyWithoutJobPostingNestedInput
  }

  export type JobPostingUncheckedUpdateWithoutJobCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    hourlySalaryRange?: StringFieldUpdateOperationsInput | string
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    jobName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employerId?: StringFieldUpdateOperationsInput | string
    discardedJobs?: DiscardedJobUncheckedUpdateManyWithoutJobPostingNestedInput
    likedJobs?: LikedJobUncheckedUpdateManyWithoutJobPostingNestedInput
  }

  export type JobPostingUncheckedUpdateManyWithoutJobCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    hourlySalaryRange?: StringFieldUpdateOperationsInput | string
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    jobName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employerId?: StringFieldUpdateOperationsInput | string
  }

  export type DiscardedJobCreateManyJobPostingInput = {
    id?: string
    createdAt?: Date | string
    applicantId: string
  }

  export type LikedJobCreateManyJobPostingInput = {
    id?: string
    createdAt?: Date | string
    applicantId: string
  }

  export type DiscardedJobUpdateWithoutJobPostingInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicant?: ApplicantUpdateOneRequiredWithoutDiscardedJobsNestedInput
  }

  export type DiscardedJobUncheckedUpdateWithoutJobPostingInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicantId?: StringFieldUpdateOperationsInput | string
  }

  export type DiscardedJobUncheckedUpdateManyWithoutJobPostingInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicantId?: StringFieldUpdateOperationsInput | string
  }

  export type LikedJobUpdateWithoutJobPostingInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicant?: ApplicantUpdateOneRequiredWithoutLikedJobsNestedInput
  }

  export type LikedJobUncheckedUpdateWithoutJobPostingInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicantId?: StringFieldUpdateOperationsInput | string
  }

  export type LikedJobUncheckedUpdateManyWithoutJobPostingInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicantId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use EmployerCountOutputTypeDefaultArgs instead
     */
    export type EmployerCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmployerCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ApplicantCountOutputTypeDefaultArgs instead
     */
    export type ApplicantCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ApplicantCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JobCategoryCountOutputTypeDefaultArgs instead
     */
    export type JobCategoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JobCategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JobPostingCountOutputTypeDefaultArgs instead
     */
    export type JobPostingCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JobPostingCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmployerDefaultArgs instead
     */
    export type EmployerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmployerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ApplicantDefaultArgs instead
     */
    export type ApplicantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ApplicantDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DocDefaultArgs instead
     */
    export type DocArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DocDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JobCategoryDefaultArgs instead
     */
    export type JobCategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JobCategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JobPostingDefaultArgs instead
     */
    export type JobPostingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JobPostingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DiscardedJobDefaultArgs instead
     */
    export type DiscardedJobArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DiscardedJobDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LikedJobDefaultArgs instead
     */
    export type LikedJobArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LikedJobDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}